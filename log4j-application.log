2018-05-26 22:04:16 DEBUG Main:223 - suspicious
2018-05-26 22:04:16 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 55 -1 0.9833333333333334
2018-05-26 22:04:16 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 68 -1 0.95
2018-05-26 22:04:16 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 67 -1 0.9333333333333333
2018-05-26 22:04:16 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 51 -1 0.9166666666666667
2018-05-26 22:04:16 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 65 -1 0.9
2018-05-26 22:04:16 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 47 -1 0.85
2018-05-26 22:04:16 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 46 -1 0.8333333333333334
2018-05-26 22:04:16 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 41 -1 0.75
2018-05-26 22:04:16 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 56 -1 0.5
2018-05-26 22:04:16 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 71 -1 0.5
2018-05-26 22:04:16 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 69 -1 0.5
2018-05-26 22:04:16 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 93 -1 0.5
2018-05-26 22:04:16 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 68 -1 0.48333333333333334
2018-05-26 22:04:16 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 92 -1 0.48333333333333334
2018-05-26 22:04:16 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 54 -1 0.4666666666666667
2018-05-26 22:04:16 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 69 -1 0.4666666666666667
2018-05-26 22:04:16 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 91 -1 0.4666666666666667
2018-05-26 22:04:16 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 53 -1 0.45
2018-05-26 22:04:16 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 52 -1 0.43333333333333335
2018-05-26 22:04:16 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 66 -1 0.4166666666666667
2018-05-26 22:04:16 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 64 -1 0.4166666666666667
2018-05-26 22:04:16 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 63 -1 0.4
2018-05-26 22:04:16 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 87 -1 0.4
2018-05-26 22:04:16 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 49 -1 0.3833333333333333
2018-05-26 22:04:16 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 86 -1 0.3833333333333333
2018-05-26 22:04:16 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 48 -1 0.3666666666666667
2018-05-26 22:04:16 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 85 -1 0.3666666666666667
2018-05-26 22:04:16 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 59 -1 0.33333333333333337
2018-05-26 22:04:16 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 60 -1 0.31666666666666665
2018-05-26 22:04:16 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 58 -1 0.31666666666666665
2018-05-26 22:04:16 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 59 -1 0.3
2018-05-26 22:04:16 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 81 -1 0.3
2018-05-26 22:04:16 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 43 -1 0.2833333333333333
2018-05-26 22:04:16 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 57 -1 0.2833333333333333
2018-05-26 22:04:16 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 80 -1 0.2833333333333333
2018-05-26 22:04:16 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 73 -1 0.26666666666666666
2018-05-26 22:04:16 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 79 -1 0.26666666666666666
2018-05-26 22:04:16 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 54 -1 0.25
2018-05-26 22:04:16 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 53 -1 0.23333333333333334
2018-05-26 22:04:16 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 73 -1 0.23333333333333334
2018-05-26 22:04:16 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 74 -1 0.21666666666666667
2018-05-26 22:04:16 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 75 -1 0.2
2018-05-26 22:04:16 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 49 -1 0.16666666666666669
2018-05-26 22:04:16 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 48 -1 0.15000000000000002
2018-05-26 22:04:16 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 47 -1 0.13333333333333336
2018-05-26 22:04:16 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 46 -1 0.11666666666666664
2018-05-26 22:04:16 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 45 -1 0.09999999999999998
2018-05-26 22:04:16 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 39 -1 0.0
2018-05-26 22:04:16 DEBUG Main:227 - ------------------------------
2018-05-26 22:04:16 INFO  Main:263 - Node:  try {
    accept(rootLevel, walker);
    walker.onCompleted();
} catch (com.mattunderscore.trees.common.walkers.Done done) {
    done.printStackTrace();
}
2018-05-26 22:04:16 DEBUG Main:267 - size 5
2018-05-26 22:04:16 INFO  Main:277 - p.y  [try {
    accept(rootLevel, walker);
    walker.onCompleted();
} catch (com.mattunderscore.trees.common.walkers.Done done) {
    done.printStackTrace();
}]
2018-05-26 22:04:28 INFO  Main:277 - p.y  try {
    accept(rootLevel, walker);
    walker.onCompleted();
} catch (com.mattunderscore.trees.common.walkers.Done done) {
    done.printStackTrace();
}
2018-05-26 22:04:45 INFO  Main:277 - p.y  [ catch (com.mattunderscore.trees.common.walkers.Done done) {
    done.printStackTrace();
}]
2018-05-26 22:06:49 INFO  Main:277 - p.y   catch (com.mattunderscore.trees.common.walkers.Done done) {
    done.printStackTrace();
}
2018-05-26 22:08:55 INFO  Main:277 - p.y  com.mattunderscore.trees.common.walkers.Done done
2018-05-26 22:11:04 INFO  Main:263 - Node:  if (!(walker.onNext(node))) {
    throw new com.mattunderscore.trees.common.walkers.Done();
} 
2018-05-26 22:11:04 DEBUG Main:267 - size 8
2018-05-26 22:11:04 INFO  Main:277 - p.y  [if (!(walker.onNext(node))) {
    throw new com.mattunderscore.trees.common.walkers.Done();
} ]
2018-05-26 22:11:10 INFO  Main:277 - p.y  [if (!(walker.onNext(node))) {
    throw new com.mattunderscore.trees.common.walkers.Done();
} , nextLevel.addAll(((java.util.Collection<N>)(node.getChildren())))]
2018-05-26 22:11:10 INFO  Main:277 - p.y  if (!(walker.onNext(node))) {
    throw new com.mattunderscore.trees.common.walkers.Done();
} 
2018-05-26 22:11:32 INFO  Main:277 - p.y  !(walker.onNext(node))
2018-05-26 22:13:25 INFO  Main:277 - p.y  (walker.onNext(node))
2018-05-26 22:15:33 INFO  Main:277 - p.y  [node]
2018-05-26 22:15:42 INFO  Main:277 - p.y  walker
2018-05-26 22:15:45 INFO  Main:277 - p.y  node
2018-05-26 22:17:35 INFO  Main:263 - Node:  for (final N node : currentLevel) {
    if (!(walker.onNext(node))) {
        throw new com.mattunderscore.trees.common.walkers.Done();
    } 
    nextLevel.addAll(((java.util.Collection<N>)(node.getChildren())));
}
2018-05-26 22:17:35 DEBUG Main:267 - size 5
2018-05-26 22:17:35 INFO  Main:277 - p.y  [for (final N node : currentLevel) {
    if (!(walker.onNext(node))) {
        throw new com.mattunderscore.trees.common.walkers.Done();
    } 
    nextLevel.addAll(((java.util.Collection<N>)(node.getChildren())));
}]
2018-05-26 22:17:41 INFO  Main:277 - p.y  [for (final N node : currentLevel) {
    if (!(walker.onNext(node))) {
        throw new com.mattunderscore.trees.common.walkers.Done();
    } 
    nextLevel.addAll(((java.util.Collection<N>)(node.getChildren())));
}, accept(nextLevel, walker)]
2018-05-26 22:17:41 INFO  Main:277 - p.y  for (final N node : currentLevel) {
    if (!(walker.onNext(node))) {
        throw new com.mattunderscore.trees.common.walkers.Done();
    } 
    nextLevel.addAll(((java.util.Collection<N>)(node.getChildren())));
}
2018-05-26 22:18:02 INFO  Main:277 - p.y  final N node
2018-05-26 22:18:03 INFO  Main:277 - p.y  currentLevel
2018-05-26 22:19:49 INFO  Main:263 - Node:  {
    final N node = tree.getRoot();
    final java.util.List<N> rootLevel = new java.util.ArrayList<>(1);
    rootLevel.add(node);
    try {
        accept(rootLevel, walker);
        walker.onCompleted();
    } catch (com.mattunderscore.trees.common.walkers.Done done) {
        done.printStackTrace();
    }
}
2018-05-26 22:19:49 DEBUG Main:267 - size 2
2018-05-26 22:19:49 INFO  Main:277 - p.y  {
    final N node = tree.getRoot();
    final java.util.List<N> rootLevel = new java.util.ArrayList<>(1);
    rootLevel.add(node);
    try {
        accept(rootLevel, walker);
        walker.onCompleted();
    } catch (com.mattunderscore.trees.common.walkers.Done done) {
        done.printStackTrace();
    }
}
2018-05-26 22:20:11 INFO  Main:277 - p.y  [final N node = tree.getRoot(), final java.util.List<N> rootLevel = new java.util.ArrayList<>(1), rootLevel.add(node), try {
    accept(rootLevel, walker);
    walker.onCompleted();
} catch (com.mattunderscore.trees.common.walkers.Done done) {
    done.printStackTrace();
}]
2018-05-26 22:20:11 INFO  Main:263 - Node:  {
    final java.util.List<N> nextLevel = new java.util.ArrayList<>(((currentLevel.size()) * 2));
    for (final N node : currentLevel) {
        if (!(walker.onNext(node))) {
            throw new com.mattunderscore.trees.common.walkers.Done();
        } 
        nextLevel.addAll(((java.util.Collection<N>)(node.getChildren())));
    }
    accept(nextLevel, walker);
}
2018-05-26 22:20:11 DEBUG Main:267 - size 2
2018-05-26 22:20:11 INFO  Main:277 - p.y  {
    final java.util.List<N> nextLevel = new java.util.ArrayList<>(((currentLevel.size()) * 2));
    for (final N node : currentLevel) {
        if (!(walker.onNext(node))) {
            throw new com.mattunderscore.trees.common.walkers.Done();
        } 
        nextLevel.addAll(((java.util.Collection<N>)(node.getChildren())));
    }
    accept(nextLevel, walker);
}
2018-05-26 22:20:11 INFO  Main:277 - p.y  [final java.util.List<N> nextLevel = new java.util.ArrayList<>(((currentLevel.size()) * 2)), for (final N node : currentLevel) {
    if (!(walker.onNext(node))) {
        throw new com.mattunderscore.trees.common.walkers.Done();
    } 
    nextLevel.addAll(((java.util.Collection<N>)(node.getChildren())));
}, accept(nextLevel, walker)]
2018-05-26 22:20:12 INFO  Main:263 - Node:  if (tree.isEmpty()) {
    walker.onEmpty();
    walker.onCompleted();
} else {
    final N node = tree.getRoot();
    final java.util.List<N> rootLevel = new java.util.ArrayList<>(1);
    rootLevel.add(node);
    try {
        accept(rootLevel, walker);
        walker.onCompleted();
    } catch (com.mattunderscore.trees.common.walkers.Done done) {
        done.printStackTrace();
    }
}
2018-05-26 22:20:12 DEBUG Main:267 - size 4
2018-05-26 22:20:12 INFO  Main:277 - p.y  [if (tree.isEmpty()) {
    walker.onEmpty();
    walker.onCompleted();
} else {
    final N node = tree.getRoot();
    final java.util.List<N> rootLevel = new java.util.ArrayList<>(1);
    rootLevel.add(node);
    try {
        accept(rootLevel, walker);
        walker.onCompleted();
    } catch (com.mattunderscore.trees.common.walkers.Done done) {
        done.printStackTrace();
    }
}]
2018-05-26 22:20:17 INFO  Main:277 - p.y  if (tree.isEmpty()) {
    walker.onEmpty();
    walker.onCompleted();
} else {
    final N node = tree.getRoot();
    final java.util.List<N> rootLevel = new java.util.ArrayList<>(1);
    rootLevel.add(node);
    try {
        accept(rootLevel, walker);
        walker.onCompleted();
    } catch (com.mattunderscore.trees.common.walkers.Done done) {
        done.printStackTrace();
    }
}
2018-05-26 22:20:36 INFO  Main:277 - p.y  tree.isEmpty()
2018-05-26 22:21:13 INFO  Main:277 - p.y  tree
2018-05-26 22:21:13 INFO  Main:263 - Node:  {
    if (tree.isEmpty()) {
        walker.onEmpty();
        walker.onCompleted();
    } else {
        final N node = tree.getRoot();
        final java.util.List<N> rootLevel = new java.util.ArrayList<>(1);
        rootLevel.add(node);
        try {
            accept(rootLevel, walker);
            walker.onCompleted();
        } catch (com.mattunderscore.trees.common.walkers.Done done) {
            done.printStackTrace();
        }
    }
}
2018-05-26 22:21:13 DEBUG Main:267 - size 2
2018-05-26 22:21:13 INFO  Main:277 - p.y  {
    if (tree.isEmpty()) {
        walker.onEmpty();
        walker.onCompleted();
    } else {
        final N node = tree.getRoot();
        final java.util.List<N> rootLevel = new java.util.ArrayList<>(1);
        rootLevel.add(node);
        try {
            accept(rootLevel, walker);
            walker.onCompleted();
        } catch (com.mattunderscore.trees.common.walkers.Done done) {
            done.printStackTrace();
        }
    }
}
2018-05-26 22:21:13 INFO  Main:277 - p.y  [if (tree.isEmpty()) {
    walker.onEmpty();
    walker.onCompleted();
} else {
    final N node = tree.getRoot();
    final java.util.List<N> rootLevel = new java.util.ArrayList<>(1);
    rootLevel.add(node);
    try {
        accept(rootLevel, walker);
        walker.onCompleted();
    } catch (com.mattunderscore.trees.common.walkers.Done done) {
        done.printStackTrace();
    }
}]
2018-05-26 22:21:18 INFO  Main:263 - Node:  @net.jcip.annotations.Immutable
public final class BreadthFirstWalker {
    public BreadthFirstWalker() {
    }

    public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void accept(T tree, com.mattunderscore.trees.traversal.Walker<N> walker) {
        if (tree.isEmpty()) {
            walker.onEmpty();
            walker.onCompleted();
        } else {
            final N node = tree.getRoot();
            final java.util.List<N> rootLevel = new java.util.ArrayList<>(1);
            rootLevel.add(node);
            try {
                accept(rootLevel, walker);
                walker.onCompleted();
            } catch (com.mattunderscore.trees.common.walkers.Done done) {
                done.printStackTrace();
            }
        }
    }

    private <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void accept(java.util.List<N> currentLevel, com.mattunderscore.trees.traversal.Walker<N> walker) throws com.mattunderscore.trees.common.walkers.Done {
        final java.util.List<N> nextLevel = new java.util.ArrayList<>(((currentLevel.size()) * 2));
        for (final N node : currentLevel) {
            if (!(walker.onNext(node))) {
                throw new com.mattunderscore.trees.common.walkers.Done();
            } 
            nextLevel.addAll(((java.util.Collection<N>)(node.getChildren())));
        }
        accept(nextLevel, walker);
    }
}
2018-05-26 22:21:18 DEBUG Main:267 - size 15
2018-05-26 22:21:18 INFO  Main:277 - p.y  @net.jcip.annotations.Immutable
public final class BreadthFirstWalker {
    public BreadthFirstWalker() {
    }

    public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void accept(T tree, com.mattunderscore.trees.traversal.Walker<N> walker) {
        if (tree.isEmpty()) {
            walker.onEmpty();
            walker.onCompleted();
        } else {
            final N node = tree.getRoot();
            final java.util.List<N> rootLevel = new java.util.ArrayList<>(1);
            rootLevel.add(node);
            try {
                accept(rootLevel, walker);
                walker.onCompleted();
            } catch (com.mattunderscore.trees.common.walkers.Done done) {
                done.printStackTrace();
            }
        }
    }

    private <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void accept(java.util.List<N> currentLevel, com.mattunderscore.trees.traversal.Walker<N> walker) throws com.mattunderscore.trees.common.walkers.Done {
        final java.util.List<N> nextLevel = new java.util.ArrayList<>(((currentLevel.size()) * 2));
        for (final N node : currentLevel) {
            if (!(walker.onNext(node))) {
                throw new com.mattunderscore.trees.common.walkers.Done();
            } 
            nextLevel.addAll(((java.util.Collection<N>)(node.getChildren())));
        }
        accept(nextLevel, walker);
    }
}
2018-05-26 22:21:18 INFO  Main:277 - p.y  [public BreadthFirstWalker() {
}]
2018-05-26 22:21:18 INFO  Main:277 - p.y  [public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void accept(T tree, com.mattunderscore.trees.traversal.Walker<N> walker) {
    if (tree.isEmpty()) {
        walker.onEmpty();
        walker.onCompleted();
    } else {
        final N node = tree.getRoot();
        final java.util.List<N> rootLevel = new java.util.ArrayList<>(1);
        rootLevel.add(node);
        try {
            accept(rootLevel, walker);
            walker.onCompleted();
        } catch (com.mattunderscore.trees.common.walkers.Done done) {
            done.printStackTrace();
        }
    }
}, private <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void accept(java.util.List<N> currentLevel, com.mattunderscore.trees.traversal.Walker<N> walker) throws com.mattunderscore.trees.common.walkers.Done {
    final java.util.List<N> nextLevel = new java.util.ArrayList<>(((currentLevel.size()) * 2));
    for (final N node : currentLevel) {
        if (!(walker.onNext(node))) {
            throw new com.mattunderscore.trees.common.walkers.Done();
        } 
        nextLevel.addAll(((java.util.Collection<N>)(node.getChildren())));
    }
    accept(nextLevel, walker);
}]
2018-05-26 22:21:18 INFO  Main:277 - p.y  public BreadthFirstWalker() {
}
2018-05-26 22:21:18 INFO  Main:277 - p.y  public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void accept(T tree, com.mattunderscore.trees.traversal.Walker<N> walker) {
    if (tree.isEmpty()) {
        walker.onEmpty();
        walker.onCompleted();
    } else {
        final N node = tree.getRoot();
        final java.util.List<N> rootLevel = new java.util.ArrayList<>(1);
        rootLevel.add(node);
        try {
            accept(rootLevel, walker);
            walker.onCompleted();
        } catch (com.mattunderscore.trees.common.walkers.Done done) {
            done.printStackTrace();
        }
    }
}
2018-05-26 22:21:18 INFO  Main:277 - p.y  [E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>]
2018-05-26 22:21:18 INFO  Main:277 - p.y  [T tree, com.mattunderscore.trees.traversal.Walker<N> walker]
2018-05-26 22:21:18 INFO  Main:277 - p.y  T tree
2018-05-26 22:21:18 INFO  Main:277 - p.y  com.mattunderscore.trees.traversal.Walker<N> walker
2018-05-26 22:21:18 INFO  Main:277 - p.y  private <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void accept(java.util.List<N> currentLevel, com.mattunderscore.trees.traversal.Walker<N> walker) throws com.mattunderscore.trees.common.walkers.Done {
    final java.util.List<N> nextLevel = new java.util.ArrayList<>(((currentLevel.size()) * 2));
    for (final N node : currentLevel) {
        if (!(walker.onNext(node))) {
            throw new com.mattunderscore.trees.common.walkers.Done();
        } 
        nextLevel.addAll(((java.util.Collection<N>)(node.getChildren())));
    }
    accept(nextLevel, walker);
}
2018-05-26 22:21:18 INFO  Main:277 - p.y  [E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>]
2018-05-26 22:21:18 INFO  Main:277 - p.y  [java.util.List<N> currentLevel, com.mattunderscore.trees.traversal.Walker<N> walker]
2018-05-26 22:21:18 INFO  Main:277 - p.y  [com.mattunderscore.trees.common.walkers.Done]
2018-05-26 22:21:18 INFO  Main:277 - p.y  java.util.List<N> currentLevel
2018-05-26 22:21:18 INFO  Main:277 - p.y  com.mattunderscore.trees.traversal.Walker<N> walker
2018-05-26 22:21:18 INFO  Main:263 - Node:  accept(rootLevel, walker)
2018-05-26 22:21:18 DEBUG Main:267 - size 6
2018-05-26 22:21:18 INFO  Main:277 - p.y  [accept(rootLevel, walker)]
2018-05-26 22:21:24 INFO  Main:277 - p.y  [accept(rootLevel, walker), walker.onCompleted()]
2018-05-26 22:21:28 INFO  Main:277 - p.y  accept(rootLevel, walker)
2018-05-26 22:21:38 INFO  Main:277 - p.y  [rootLevel, walker]
2018-05-26 22:21:39 INFO  Main:277 - p.y  rootLevel
2018-05-26 22:21:41 INFO  Main:277 - p.y  walker
2018-05-26 22:21:43 INFO  Main:263 - Node:  nextLevel.addAll(((java.util.Collection<N>)(node.getChildren())))
2018-05-26 22:21:43 DEBUG Main:267 - size 7
2018-05-26 22:21:43 INFO  Main:277 - p.y  [nextLevel.addAll(((java.util.Collection<N>)(node.getChildren())))]
2018-05-26 22:21:51 INFO  Main:277 - p.y  nextLevel.addAll(((java.util.Collection<N>)(node.getChildren())))
2018-05-26 22:22:16 INFO  Main:277 - p.y  [((java.util.Collection<N>)(node.getChildren()))]
2018-05-26 22:22:18 INFO  Main:277 - p.y  nextLevel
2018-05-26 22:22:20 INFO  Main:277 - p.y  ((java.util.Collection<N>)(node.getChildren()))
2018-05-26 22:22:30 INFO  Main:277 - p.y  [java.util.Collection<N>]
2018-05-26 22:22:30 INFO  Main:277 - p.y  node
2018-05-26 22:22:33 INFO  Main:263 - Node:  breadthFirstWalker.accept(tree, walker)
2018-05-26 22:22:33 DEBUG Main:267 - size 6
2018-05-26 22:22:33 INFO  Main:277 - p.y  [breadthFirstWalker.accept(tree, walker)]
2018-05-26 22:22:40 INFO  Main:277 - p.y  breadthFirstWalker.accept(tree, walker)
2018-05-26 22:23:01 INFO  Main:277 - p.y  [tree, walker]
2018-05-26 22:23:01 INFO  Main:277 - p.y  breadthFirstWalker
2018-05-26 22:23:04 INFO  Main:277 - p.y  tree
2018-05-26 22:23:46 INFO  Main:277 - p.y  walker
2018-05-26 22:23:49 INFO  Main:263 - Node:  breadthFirstWalker.accept(tree, nodeWalker)
2018-05-26 22:23:49 DEBUG Main:267 - size 6
2018-05-26 22:23:49 INFO  Main:277 - p.y  [breadthFirstWalker.accept(tree, nodeWalker)]
2018-05-26 22:23:55 INFO  Main:277 - p.y  breadthFirstWalker.accept(tree, nodeWalker)
2018-05-26 22:24:28 INFO  Main:277 - p.y  [tree, nodeWalker]
2018-05-26 22:24:28 INFO  Main:277 - p.y  breadthFirstWalker
2018-05-26 22:24:29 INFO  Main:277 - p.y  tree
2018-05-26 22:26:05 INFO  Main:277 - p.y  nodeWalker
2018-05-26 22:26:08 INFO  Main:263 - Node:  {
    breadthFirstWalker.accept(tree, walker);
}
2018-05-26 22:26:08 DEBUG Main:267 - size 2
2018-05-26 22:26:08 INFO  Main:277 - p.y  {
    breadthFirstWalker.accept(tree, walker);
}
2018-05-26 22:26:08 INFO  Main:277 - p.y  [breadthFirstWalker.accept(tree, walker)]
2018-05-26 22:26:13 INFO  Main:263 - Node:  final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker)
2018-05-26 22:26:13 DEBUG Main:267 - size 6
2018-05-26 22:26:13 INFO  Main:277 - p.y  [final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker)]
2018-05-26 22:26:13 INFO  Main:277 - p.y  [final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker), breadthFirstWalker.accept(tree, nodeWalker)]
2018-05-26 22:26:13 INFO  Main:277 - p.y  final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker)
2018-05-26 22:26:14 INFO  Main:277 - p.y  new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker)
2018-05-26 22:26:16 INFO  Main:277 - p.y  [walker]
2018-05-26 22:26:18 INFO  Main:277 - p.y  walker
2018-05-26 22:26:20 INFO  Main:263 - Node:  rootLevel.add(node)
2018-05-26 22:26:20 DEBUG Main:267 - size 6
2018-05-26 22:26:20 INFO  Main:277 - p.y  [rootLevel.add(node)]
2018-05-26 22:26:25 INFO  Main:277 - p.y  [rootLevel.add(node), try {
    accept(rootLevel, walker);
    walker.onCompleted();
} catch (com.mattunderscore.trees.common.walkers.Done done) {
    done.printStackTrace();
}]
2018-05-26 22:26:27 INFO  Main:277 - p.y  rootLevel.add(node)
2018-05-26 22:26:43 INFO  Main:277 - p.y  [node]
2018-05-26 22:26:52 INFO  Main:277 - p.y  rootLevel
2018-05-26 22:26:54 INFO  Main:277 - p.y  node
2018-05-26 22:28:17 INFO  Main:263 - Node:  throw new com.mattunderscore.trees.common.walkers.Done()
2018-05-26 22:28:17 DEBUG Main:267 - size 3
2018-05-26 22:28:17 INFO  Main:277 - p.y  [throw new com.mattunderscore.trees.common.walkers.Done()]
2018-05-26 22:28:27 INFO  Main:277 - p.y  throw new com.mattunderscore.trees.common.walkers.Done()
2018-05-26 22:28:41 INFO  Main:277 - p.y  new com.mattunderscore.trees.common.walkers.Done()
2018-05-26 22:32:24 INFO  Main:263 - Node:  {
    final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
    breadthFirstWalker.accept(tree, nodeWalker);
}
2018-05-26 22:32:24 DEBUG Main:267 - size 2
2018-05-26 22:32:24 INFO  Main:277 - p.y  {
    final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
    breadthFirstWalker.accept(tree, nodeWalker);
}
2018-05-26 22:32:24 INFO  Main:277 - p.y  [final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker), breadthFirstWalker.accept(tree, nodeWalker)]
2018-05-26 22:32:25 INFO  Main:263 - Node:  final java.util.List<N> rootLevel = new java.util.ArrayList<>(1)
2018-05-26 22:32:25 DEBUG Main:267 - size 7
2018-05-26 22:32:25 INFO  Main:277 - p.y  [final java.util.List<N> rootLevel = new java.util.ArrayList<>(1)]
2018-05-26 22:32:26 INFO  Main:277 - p.y  [final java.util.List<N> rootLevel = new java.util.ArrayList<>(1), rootLevel.add(node)]
2018-05-26 22:32:26 INFO  Main:277 - p.y  [final java.util.List<N> rootLevel = new java.util.ArrayList<>(1), rootLevel.add(node), try {
    accept(rootLevel, walker);
    walker.onCompleted();
} catch (com.mattunderscore.trees.common.walkers.Done done) {
    done.printStackTrace();
}]
2018-05-26 22:32:26 INFO  Main:277 - p.y  final java.util.List<N> rootLevel = new java.util.ArrayList<>(1)
2018-05-26 22:32:27 INFO  Main:277 - p.y  new java.util.ArrayList<>(1)
2018-05-26 22:32:29 INFO  Main:277 - p.y  [1]
2018-05-26 22:32:32 INFO  Main:277 - p.y  1
2018-05-26 22:32:34 INFO  Main:263 - Node:  final N node = tree.getRoot()
2018-05-26 22:32:34 DEBUG Main:267 - size 7
2018-05-26 22:32:34 INFO  Main:277 - p.y  [final N node = tree.getRoot()]
2018-05-26 22:32:34 INFO  Main:277 - p.y  [final N node = tree.getRoot(), final java.util.List<N> rootLevel = new java.util.ArrayList<>(1)]
2018-05-26 22:32:34 INFO  Main:277 - p.y  [final N node = tree.getRoot(), final java.util.List<N> rootLevel = new java.util.ArrayList<>(1), rootLevel.add(node)]
2018-05-26 22:32:34 INFO  Main:277 - p.y  [final N node = tree.getRoot(), final java.util.List<N> rootLevel = new java.util.ArrayList<>(1), rootLevel.add(node), try {
    accept(rootLevel, walker);
    walker.onCompleted();
} catch (com.mattunderscore.trees.common.walkers.Done done) {
    done.printStackTrace();
}]
2018-05-26 22:32:35 INFO  Main:277 - p.y  final N node = tree.getRoot()
2018-05-26 22:32:36 INFO  Main:277 - p.y  tree.getRoot()
2018-05-26 22:33:35 INFO  Main:277 - p.y  tree
2018-05-26 22:33:36 INFO  Main:263 - Node:  final java.util.List<N> nextLevel = new java.util.ArrayList<>(((currentLevel.size()) * 2))
2018-05-26 22:33:36 DEBUG Main:267 - size 10
2018-05-26 22:33:36 INFO  Main:277 - p.y  [final java.util.List<N> nextLevel = new java.util.ArrayList<>(((currentLevel.size()) * 2))]
2018-05-26 22:33:36 INFO  Main:277 - p.y  [final java.util.List<N> nextLevel = new java.util.ArrayList<>(((currentLevel.size()) * 2)), for (final N node : currentLevel) {
    if (!(walker.onNext(node))) {
        throw new com.mattunderscore.trees.common.walkers.Done();
    } 
    nextLevel.addAll(((java.util.Collection<N>)(node.getChildren())));
}]
2018-05-26 22:33:36 INFO  Main:277 - p.y  [final java.util.List<N> nextLevel = new java.util.ArrayList<>(((currentLevel.size()) * 2)), for (final N node : currentLevel) {
    if (!(walker.onNext(node))) {
        throw new com.mattunderscore.trees.common.walkers.Done();
    } 
    nextLevel.addAll(((java.util.Collection<N>)(node.getChildren())));
}, accept(nextLevel, walker)]
2018-05-26 22:33:37 INFO  Main:277 - p.y  final java.util.List<N> nextLevel = new java.util.ArrayList<>(((currentLevel.size()) * 2))
2018-05-26 22:33:38 INFO  Main:277 - p.y  new java.util.ArrayList<>(((currentLevel.size()) * 2))
2018-05-26 22:33:41 INFO  Main:277 - p.y  [((currentLevel.size()) * 2)]
2018-05-26 22:33:45 INFO  Main:277 - p.y  ((currentLevel.size()) * 2)
2018-05-26 22:33:50 INFO  Main:277 - p.y  (currentLevel.size())
2018-05-26 22:33:54 INFO  Main:277 - p.y  currentLevel
2018-05-26 22:33:56 INFO  Main:277 - p.y  2
2018-05-26 22:33:59 INFO  Main:263 - Node:  postOrderWalker.accept(tree, walker)
2018-05-26 22:33:59 DEBUG Main:267 - size 6
2018-05-26 22:33:59 INFO  Main:277 - p.y  [postOrderWalker.accept(tree, walker)]
2018-05-26 22:34:04 INFO  Main:277 - p.y  postOrderWalker.accept(tree, walker)
2018-05-26 22:34:28 INFO  Main:277 - p.y  [tree, walker]
2018-05-26 22:34:28 INFO  Main:277 - p.y  postOrderWalker
2018-05-26 22:34:29 INFO  Main:277 - p.y  tree
2018-05-26 22:35:15 INFO  Main:277 - p.y  walker
2018-05-26 22:35:16 INFO  Main:263 - Node:  {
    postOrderWalker.accept(tree, walker);
}
2018-05-26 22:35:16 DEBUG Main:267 - size 2
2018-05-26 22:35:16 INFO  Main:277 - p.y  {
    postOrderWalker.accept(tree, walker);
}
2018-05-26 22:35:16 INFO  Main:277 - p.y  [postOrderWalker.accept(tree, walker)]
2018-05-26 22:35:22 INFO  Main:263 - Node:  postOrderWalker.accept(tree, nodeWalker)
2018-05-26 22:35:22 DEBUG Main:267 - size 6
2018-05-26 22:35:22 INFO  Main:277 - p.y  [postOrderWalker.accept(tree, nodeWalker)]
2018-05-26 22:35:28 INFO  Main:277 - p.y  postOrderWalker.accept(tree, nodeWalker)
2018-05-26 22:35:57 INFO  Main:277 - p.y  [tree, nodeWalker]
2018-05-26 22:35:57 INFO  Main:277 - p.y  postOrderWalker
2018-05-26 22:36:02 INFO  Main:277 - p.y  tree
2018-05-26 22:37:40 INFO  Main:277 - p.y  nodeWalker
2018-05-26 22:37:42 INFO  Main:263 - Node:  walker.onCompleted()
2018-05-26 22:37:42 DEBUG Main:267 - size 3
2018-05-26 22:37:42 INFO  Main:277 - p.y  [walker.onCompleted()]
2018-05-26 22:37:48 INFO  Main:277 - p.y  walker.onCompleted()
2018-05-26 22:37:55 INFO  Main:277 - p.y  walker
2018-05-26 22:37:56 INFO  Main:263 - Node:  final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker)
2018-05-26 22:37:56 DEBUG Main:267 - size 6
2018-05-26 22:37:56 INFO  Main:277 - p.y  [final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker)]
2018-05-26 22:37:56 INFO  Main:277 - p.y  [final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker), postOrderWalker.accept(tree, nodeWalker)]
2018-05-26 22:37:56 INFO  Main:277 - p.y  final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker)
2018-05-26 22:37:57 INFO  Main:277 - p.y  new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker)
2018-05-26 22:37:59 INFO  Main:277 - p.y  [walker]
2018-05-26 22:38:01 INFO  Main:277 - p.y  walker
2018-05-26 22:38:03 INFO  Main:263 - Node:  walker.onEmpty()
2018-05-26 22:38:03 DEBUG Main:267 - size 4
2018-05-26 22:38:03 INFO  Main:277 - p.y  [walker.onEmpty()]
2018-05-26 22:38:08 INFO  Main:277 - p.y  [walker.onEmpty(), walker.onCompleted()]
2018-05-26 22:38:12 INFO  Main:277 - p.y  walker.onEmpty()
2018-05-26 22:38:18 INFO  Main:277 - p.y  walker
2018-05-26 22:38:19 INFO  Main:263 - Node:  {
    final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
    postOrderWalker.accept(tree, nodeWalker);
}
2018-05-26 22:38:19 DEBUG Main:267 - size 2
2018-05-26 22:38:19 INFO  Main:277 - p.y  {
    final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
    postOrderWalker.accept(tree, nodeWalker);
}
2018-05-26 22:38:19 INFO  Main:277 - p.y  [final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker), postOrderWalker.accept(tree, nodeWalker)]
2018-05-26 22:38:19 INFO  Main:263 - Node:  inOrderWalker.accept(tree, walker)
2018-05-26 22:38:19 DEBUG Main:267 - size 6
2018-05-26 22:38:19 INFO  Main:277 - p.y  [inOrderWalker.accept(tree, walker)]
2018-05-26 22:38:24 INFO  Main:277 - p.y  inOrderWalker.accept(tree, walker)
2018-05-26 22:38:45 INFO  Main:277 - p.y  [tree, walker]
2018-05-26 22:38:45 INFO  Main:277 - p.y  inOrderWalker
2018-05-26 22:38:46 INFO  Main:277 - p.y  tree
2018-05-26 22:39:27 INFO  Main:277 - p.y  walker
2018-05-26 22:39:28 INFO  Main:263 - Node:  done.printStackTrace()
2018-05-26 22:39:28 DEBUG Main:267 - size 3
2018-05-26 22:39:28 INFO  Main:277 - p.y  [done.printStackTrace()]
2018-05-26 22:39:36 INFO  Main:277 - p.y  done.printStackTrace()
2018-05-26 22:39:54 INFO  Main:277 - p.y  done
2018-05-26 22:39:56 INFO  Main:263 - Node:  {
    inOrderWalker.accept(tree, walker);
}
2018-05-26 22:39:56 DEBUG Main:267 - size 2
2018-05-26 22:39:56 INFO  Main:277 - p.y  {
    inOrderWalker.accept(tree, walker);
}
2018-05-26 22:39:56 INFO  Main:277 - p.y  [inOrderWalker.accept(tree, walker)]
2018-05-26 22:40:01 INFO  Main:263 - Node:  {
    done.printStackTrace();
}
2018-05-26 22:40:01 DEBUG Main:267 - size 2
2018-05-26 22:40:01 INFO  Main:277 - p.y  {
    done.printStackTrace();
}
2018-05-26 22:40:09 INFO  Main:277 - p.y  [done.printStackTrace()]
2018-05-26 22:40:20 INFO  Main:263 - Node:  inOrderWalker.accept(tree, nodeWalker)
2018-05-26 22:40:20 DEBUG Main:267 - size 6
2018-05-26 22:40:20 INFO  Main:277 - p.y  [inOrderWalker.accept(tree, nodeWalker)]
2018-05-26 22:40:26 INFO  Main:277 - p.y  inOrderWalker.accept(tree, nodeWalker)
2018-05-26 22:40:57 INFO  Main:277 - p.y  [tree, nodeWalker]
2018-05-26 22:40:57 INFO  Main:277 - p.y  inOrderWalker
2018-05-26 22:41:01 INFO  Main:277 - p.y  tree
2018-05-26 22:42:30 INFO  Main:277 - p.y  nodeWalker
2018-05-26 22:42:32 INFO  Main:263 - Node:  {
}
2018-05-26 22:42:32 DEBUG Main:267 - size 2
2018-05-26 22:42:32 INFO  Main:277 - p.y  {
}
2018-05-26 22:42:32 INFO  Main:277 - p.y  [super()]
2018-05-26 22:42:32 INFO  Main:263 - Node:  walker.onCompleted()
2018-05-26 22:42:32 DEBUG Main:267 - size 3
2018-05-26 22:42:32 INFO  Main:277 - p.y  [walker.onCompleted()]
2018-05-26 22:42:40 INFO  Main:277 - p.y  walker.onCompleted()
2018-05-26 22:42:55 INFO  Main:277 - p.y  walker
2018-05-26 22:42:57 INFO  Main:263 - Node:  final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker)
2018-05-26 22:42:57 DEBUG Main:267 - size 6
2018-05-26 22:42:57 INFO  Main:277 - p.y  [final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker)]
2018-05-26 22:42:57 INFO  Main:277 - p.y  [final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker), inOrderWalker.accept(tree, nodeWalker)]
2018-05-26 22:42:57 INFO  Main:277 - p.y  final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker)
2018-05-26 22:42:59 INFO  Main:277 - p.y  new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker)
2018-05-26 22:43:01 INFO  Main:277 - p.y  [walker]
2018-05-26 22:43:02 INFO  Main:277 - p.y  walker
2018-05-26 22:43:04 INFO  Main:263 - Node:  accept(nextLevel, walker)
2018-05-26 22:43:04 DEBUG Main:267 - size 5
2018-05-26 22:43:04 INFO  Main:277 - p.y  [accept(nextLevel, walker)]
2018-05-26 22:43:12 INFO  Main:277 - p.y  accept(nextLevel, walker)
2018-05-26 22:43:32 INFO  Main:277 - p.y  [nextLevel, walker]
2018-05-26 22:43:32 INFO  Main:277 - p.y  nextLevel
2018-05-26 22:43:34 INFO  Main:277 - p.y  walker
2018-05-26 22:43:35 INFO  Main:263 - Node:  {
    final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
    inOrderWalker.accept(tree, nodeWalker);
}
2018-05-26 22:43:35 DEBUG Main:267 - size 2
2018-05-26 22:43:35 INFO  Main:277 - p.y  {
    final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
    inOrderWalker.accept(tree, nodeWalker);
}
2018-05-26 22:43:35 INFO  Main:277 - p.y  [final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker), inOrderWalker.accept(tree, nodeWalker)]
2018-05-26 22:43:36 INFO  Main:263 - Node:  preOrderWalker.accept(tree, walker)
2018-05-26 22:43:36 DEBUG Main:267 - size 6
2018-05-26 22:43:36 INFO  Main:277 - p.y  [preOrderWalker.accept(tree, walker)]
2018-05-26 22:43:40 INFO  Main:277 - p.y  preOrderWalker.accept(tree, walker)
2018-05-26 22:44:00 INFO  Main:277 - p.y  [tree, walker]
2018-05-26 22:44:00 INFO  Main:277 - p.y  preOrderWalker
2018-05-26 22:44:01 INFO  Main:277 - p.y  tree
2018-05-26 22:44:45 INFO  Main:277 - p.y  walker
2018-05-26 22:44:46 INFO  Main:263 - Node:  {
    preOrderWalker.accept(tree, walker);
}
2018-05-26 22:44:46 DEBUG Main:267 - size 2
2018-05-26 22:44:46 INFO  Main:277 - p.y  {
    preOrderWalker.accept(tree, walker);
}
2018-05-26 22:44:46 INFO  Main:277 - p.y  [preOrderWalker.accept(tree, walker)]
2018-05-26 22:44:52 INFO  Main:263 - Node:  {
    final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
    preOrderWalker.accept(tree, nodeWalker);
}
2018-05-26 22:44:52 DEBUG Main:267 - size 2
2018-05-26 22:44:52 INFO  Main:277 - p.y  {
    final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
    preOrderWalker.accept(tree, nodeWalker);
}
2018-05-26 22:44:52 INFO  Main:277 - p.y  [final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker), preOrderWalker.accept(tree, nodeWalker)]
2018-05-26 22:44:52 INFO  Main:263 - Node:  final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker)
2018-05-26 22:44:52 DEBUG Main:267 - size 6
2018-05-26 22:44:52 INFO  Main:277 - p.y  [final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker)]
2018-05-26 22:44:52 INFO  Main:277 - p.y  [final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker), preOrderWalker.accept(tree, nodeWalker)]
2018-05-26 22:44:52 INFO  Main:277 - p.y  final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker)
2018-05-26 22:44:53 INFO  Main:277 - p.y  new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker)
2018-05-26 22:44:54 INFO  Main:277 - p.y  [walker]
2018-05-26 22:44:55 INFO  Main:277 - p.y  walker
2018-05-26 22:44:56 INFO  Main:263 - Node:  preOrderWalker.accept(tree, nodeWalker)
2018-05-26 22:44:56 DEBUG Main:267 - size 6
2018-05-26 22:44:56 INFO  Main:277 - p.y  [preOrderWalker.accept(tree, nodeWalker)]
2018-05-26 22:45:02 INFO  Main:277 - p.y  preOrderWalker.accept(tree, nodeWalker)
2018-05-26 22:45:30 INFO  Main:277 - p.y  [tree, nodeWalker]
2018-05-26 22:45:30 INFO  Main:277 - p.y  preOrderWalker
2018-05-26 22:45:34 INFO  Main:277 - p.y  tree
2018-05-26 22:47:05 INFO  Main:277 - p.y  nodeWalker
2018-05-26 22:47:07 INFO  Main:263 - Node:  preOrderWalker = new com.mattunderscore.trees.common.walkers.PreOrderWalker()
2018-05-26 22:47:07 DEBUG Main:267 - size 4
2018-05-26 22:47:07 INFO  Main:277 - p.y  [preOrderWalker = new com.mattunderscore.trees.common.walkers.PreOrderWalker()]
2018-05-26 22:47:07 INFO  Main:277 - p.y  preOrderWalker = new com.mattunderscore.trees.common.walkers.PreOrderWalker()
2018-05-26 22:47:08 INFO  Main:277 - p.y  preOrderWalker
2018-05-26 22:47:08 INFO  Main:277 - p.y  new com.mattunderscore.trees.common.walkers.PreOrderWalker()
2018-05-26 22:47:09 INFO  Main:263 - Node:  postOrderWalker = new com.mattunderscore.trees.common.walkers.PostOrderWalker()
2018-05-26 22:47:09 DEBUG Main:267 - size 5
2018-05-26 22:47:09 INFO  Main:277 - p.y  [postOrderWalker = new com.mattunderscore.trees.common.walkers.PostOrderWalker()]
2018-05-26 22:47:09 INFO  Main:277 - p.y  [postOrderWalker = new com.mattunderscore.trees.common.walkers.PostOrderWalker(), preOrderWalker = new com.mattunderscore.trees.common.walkers.PreOrderWalker()]
2018-05-26 22:47:09 INFO  Main:277 - p.y  postOrderWalker = new com.mattunderscore.trees.common.walkers.PostOrderWalker()
2018-05-26 22:47:10 INFO  Main:277 - p.y  postOrderWalker
2018-05-26 22:47:10 INFO  Main:277 - p.y  new com.mattunderscore.trees.common.walkers.PostOrderWalker()
2018-05-26 22:47:10 INFO  Main:263 - Node:  inOrderWalker = new com.mattunderscore.trees.common.walkers.InOrderWalker()
2018-05-26 22:47:10 DEBUG Main:267 - size 6
2018-05-26 22:47:10 INFO  Main:277 - p.y  [inOrderWalker = new com.mattunderscore.trees.common.walkers.InOrderWalker()]
2018-05-26 22:47:11 INFO  Main:277 - p.y  [inOrderWalker = new com.mattunderscore.trees.common.walkers.InOrderWalker(), postOrderWalker = new com.mattunderscore.trees.common.walkers.PostOrderWalker()]
2018-05-26 22:47:11 INFO  Main:277 - p.y  [inOrderWalker = new com.mattunderscore.trees.common.walkers.InOrderWalker(), postOrderWalker = new com.mattunderscore.trees.common.walkers.PostOrderWalker(), preOrderWalker = new com.mattunderscore.trees.common.walkers.PreOrderWalker()]
2018-05-26 22:47:11 INFO  Main:277 - p.y  inOrderWalker = new com.mattunderscore.trees.common.walkers.InOrderWalker()
2018-05-26 22:47:11 INFO  Main:277 - p.y  inOrderWalker
2018-05-26 22:47:11 INFO  Main:277 - p.y  new com.mattunderscore.trees.common.walkers.InOrderWalker()
2018-05-26 22:47:12 INFO  Main:263 - Node:  breadthFirstWalker = new com.mattunderscore.trees.common.walkers.BreadthFirstWalker()
2018-05-26 22:47:12 DEBUG Main:267 - size 7
2018-05-26 22:47:12 INFO  Main:277 - p.y  [breadthFirstWalker = new com.mattunderscore.trees.common.walkers.BreadthFirstWalker()]
2018-05-26 22:47:12 INFO  Main:277 - p.y  [breadthFirstWalker = new com.mattunderscore.trees.common.walkers.BreadthFirstWalker(), inOrderWalker = new com.mattunderscore.trees.common.walkers.InOrderWalker()]
2018-05-26 22:47:12 INFO  Main:277 - p.y  [breadthFirstWalker = new com.mattunderscore.trees.common.walkers.BreadthFirstWalker(), inOrderWalker = new com.mattunderscore.trees.common.walkers.InOrderWalker(), postOrderWalker = new com.mattunderscore.trees.common.walkers.PostOrderWalker()]
2018-05-26 22:47:12 INFO  Main:277 - p.y  [breadthFirstWalker = new com.mattunderscore.trees.common.walkers.BreadthFirstWalker(), inOrderWalker = new com.mattunderscore.trees.common.walkers.InOrderWalker(), postOrderWalker = new com.mattunderscore.trees.common.walkers.PostOrderWalker(), preOrderWalker = new com.mattunderscore.trees.common.walkers.PreOrderWalker()]
2018-05-26 22:47:12 INFO  Main:277 - p.y  breadthFirstWalker = new com.mattunderscore.trees.common.walkers.BreadthFirstWalker()
2018-05-26 22:47:15 INFO  Main:277 - p.y  breadthFirstWalker
2018-05-26 22:47:15 INFO  Main:277 - p.y  new com.mattunderscore.trees.common.walkers.BreadthFirstWalker()
2018-05-26 22:47:15 INFO  Main:263 - Node:  {
    breadthFirstWalker = new com.mattunderscore.trees.common.walkers.BreadthFirstWalker();
    inOrderWalker = new com.mattunderscore.trees.common.walkers.InOrderWalker();
    postOrderWalker = new com.mattunderscore.trees.common.walkers.PostOrderWalker();
    preOrderWalker = new com.mattunderscore.trees.common.walkers.PreOrderWalker();
}
2018-05-26 22:47:15 DEBUG Main:267 - size 2
2018-05-26 22:47:15 INFO  Main:277 - p.y  {
    breadthFirstWalker = new com.mattunderscore.trees.common.walkers.BreadthFirstWalker();
    inOrderWalker = new com.mattunderscore.trees.common.walkers.InOrderWalker();
    postOrderWalker = new com.mattunderscore.trees.common.walkers.PostOrderWalker();
    preOrderWalker = new com.mattunderscore.trees.common.walkers.PreOrderWalker();
}
2018-05-26 22:47:15 INFO  Main:277 - p.y  [super(), breadthFirstWalker = new com.mattunderscore.trees.common.walkers.BreadthFirstWalker(), inOrderWalker = new com.mattunderscore.trees.common.walkers.InOrderWalker(), postOrderWalker = new com.mattunderscore.trees.common.walkers.PostOrderWalker(), preOrderWalker = new com.mattunderscore.trees.common.walkers.PreOrderWalker()]
2018-05-26 22:47:15 INFO  Main:263 - Node:  @net.jcip.annotations.Immutable
public final class TreeWalkerFactoryImpl implements com.mattunderscore.trees.traversal.TreeWalkerFactory {
    private final com.mattunderscore.trees.common.walkers.BreadthFirstWalker breadthFirstWalker;

    private final com.mattunderscore.trees.common.walkers.InOrderWalker inOrderWalker;

    private final com.mattunderscore.trees.common.walkers.PostOrderWalker postOrderWalker;

    private final com.mattunderscore.trees.common.walkers.PreOrderWalker preOrderWalker;

    public TreeWalkerFactoryImpl() {
        breadthFirstWalker = new com.mattunderscore.trees.common.walkers.BreadthFirstWalker();
        inOrderWalker = new com.mattunderscore.trees.common.walkers.InOrderWalker();
        postOrderWalker = new com.mattunderscore.trees.common.walkers.PostOrderWalker();
        preOrderWalker = new com.mattunderscore.trees.common.walkers.PreOrderWalker();
    }

    @java.lang.Override
    public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkPreOrder(T tree, com.mattunderscore.trees.traversal.Walker<N> walker) {
        preOrderWalker.accept(tree, walker);
    }

    @java.lang.Override
    public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkInOrder(T tree, com.mattunderscore.trees.traversal.Walker<N> walker) {
        inOrderWalker.accept(tree, walker);
    }

    @java.lang.Override
    public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkPostOrder(T tree, com.mattunderscore.trees.traversal.Walker<N> walker) {
        postOrderWalker.accept(tree, walker);
    }

    @java.lang.Override
    public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkBreadthFirst(T tree, com.mattunderscore.trees.traversal.Walker<N> walker) {
        breadthFirstWalker.accept(tree, walker);
    }

    @java.lang.Override
    public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkElementsPreOrder(T tree, com.mattunderscore.trees.traversal.Walker<E> walker) {
        final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
        preOrderWalker.accept(tree, nodeWalker);
    }

    @java.lang.Override
    public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkElementsInOrder(T tree, com.mattunderscore.trees.traversal.Walker<E> walker) {
        final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
        inOrderWalker.accept(tree, nodeWalker);
    }

    @java.lang.Override
    public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkElementsPostOrder(T tree, com.mattunderscore.trees.traversal.Walker<E> walker) {
        final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
        postOrderWalker.accept(tree, nodeWalker);
    }

    @java.lang.Override
    public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkElementsBreadthFirst(T tree, com.mattunderscore.trees.traversal.Walker<E> walker) {
        final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
        breadthFirstWalker.accept(tree, nodeWalker);
    }
}
2018-05-26 22:47:15 DEBUG Main:267 - size 50
2018-05-26 22:47:15 INFO  Main:277 - p.y  @net.jcip.annotations.Immutable
public final class TreeWalkerFactoryImpl implements com.mattunderscore.trees.traversal.TreeWalkerFactory {
    private final com.mattunderscore.trees.common.walkers.BreadthFirstWalker breadthFirstWalker;

    private final com.mattunderscore.trees.common.walkers.InOrderWalker inOrderWalker;

    private final com.mattunderscore.trees.common.walkers.PostOrderWalker postOrderWalker;

    private final com.mattunderscore.trees.common.walkers.PreOrderWalker preOrderWalker;

    public TreeWalkerFactoryImpl() {
        breadthFirstWalker = new com.mattunderscore.trees.common.walkers.BreadthFirstWalker();
        inOrderWalker = new com.mattunderscore.trees.common.walkers.InOrderWalker();
        postOrderWalker = new com.mattunderscore.trees.common.walkers.PostOrderWalker();
        preOrderWalker = new com.mattunderscore.trees.common.walkers.PreOrderWalker();
    }

    @java.lang.Override
    public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkPreOrder(T tree, com.mattunderscore.trees.traversal.Walker<N> walker) {
        preOrderWalker.accept(tree, walker);
    }

    @java.lang.Override
    public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkInOrder(T tree, com.mattunderscore.trees.traversal.Walker<N> walker) {
        inOrderWalker.accept(tree, walker);
    }

    @java.lang.Override
    public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkPostOrder(T tree, com.mattunderscore.trees.traversal.Walker<N> walker) {
        postOrderWalker.accept(tree, walker);
    }

    @java.lang.Override
    public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkBreadthFirst(T tree, com.mattunderscore.trees.traversal.Walker<N> walker) {
        breadthFirstWalker.accept(tree, walker);
    }

    @java.lang.Override
    public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkElementsPreOrder(T tree, com.mattunderscore.trees.traversal.Walker<E> walker) {
        final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
        preOrderWalker.accept(tree, nodeWalker);
    }

    @java.lang.Override
    public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkElementsInOrder(T tree, com.mattunderscore.trees.traversal.Walker<E> walker) {
        final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
        inOrderWalker.accept(tree, nodeWalker);
    }

    @java.lang.Override
    public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkElementsPostOrder(T tree, com.mattunderscore.trees.traversal.Walker<E> walker) {
        final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
        postOrderWalker.accept(tree, nodeWalker);
    }

    @java.lang.Override
    public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkElementsBreadthFirst(T tree, com.mattunderscore.trees.traversal.Walker<E> walker) {
        final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
        breadthFirstWalker.accept(tree, nodeWalker);
    }
}
2018-05-26 22:47:15 INFO  Main:277 - p.y  [public TreeWalkerFactoryImpl() {
    breadthFirstWalker = new com.mattunderscore.trees.common.walkers.BreadthFirstWalker();
    inOrderWalker = new com.mattunderscore.trees.common.walkers.InOrderWalker();
    postOrderWalker = new com.mattunderscore.trees.common.walkers.PostOrderWalker();
    preOrderWalker = new com.mattunderscore.trees.common.walkers.PreOrderWalker();
}]
2018-05-26 22:47:15 INFO  Main:277 - p.y  [com.mattunderscore.trees.traversal.TreeWalkerFactory]
2018-05-26 22:47:15 INFO  Main:277 - p.y  [@java.lang.Override
public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkBreadthFirst(T tree, com.mattunderscore.trees.traversal.Walker<N> walker) {
    breadthFirstWalker.accept(tree, walker);
}, @java.lang.Override
public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkElementsBreadthFirst(T tree, com.mattunderscore.trees.traversal.Walker<E> walker) {
    final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
    breadthFirstWalker.accept(tree, nodeWalker);
}, @java.lang.Override
public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkElementsInOrder(T tree, com.mattunderscore.trees.traversal.Walker<E> walker) {
    final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
    inOrderWalker.accept(tree, nodeWalker);
}, @java.lang.Override
public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkElementsPostOrder(T tree, com.mattunderscore.trees.traversal.Walker<E> walker) {
    final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
    postOrderWalker.accept(tree, nodeWalker);
}, @java.lang.Override
public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkElementsPreOrder(T tree, com.mattunderscore.trees.traversal.Walker<E> walker) {
    final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
    preOrderWalker.accept(tree, nodeWalker);
}, @java.lang.Override
public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkInOrder(T tree, com.mattunderscore.trees.traversal.Walker<N> walker) {
    inOrderWalker.accept(tree, walker);
}, @java.lang.Override
public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkPostOrder(T tree, com.mattunderscore.trees.traversal.Walker<N> walker) {
    postOrderWalker.accept(tree, walker);
}, @java.lang.Override
public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkPreOrder(T tree, com.mattunderscore.trees.traversal.Walker<N> walker) {
    preOrderWalker.accept(tree, walker);
}]
2018-05-26 22:47:15 INFO  Main:277 - p.y  [private final com.mattunderscore.trees.common.walkers.BreadthFirstWalker breadthFirstWalker;, private final com.mattunderscore.trees.common.walkers.InOrderWalker inOrderWalker;, private final com.mattunderscore.trees.common.walkers.PostOrderWalker postOrderWalker;, private final com.mattunderscore.trees.common.walkers.PreOrderWalker preOrderWalker;]
2018-05-26 22:47:15 INFO  Main:277 - p.y  private final com.mattunderscore.trees.common.walkers.BreadthFirstWalker breadthFirstWalker;
2018-05-26 22:47:15 INFO  Main:277 - p.y  private final com.mattunderscore.trees.common.walkers.InOrderWalker inOrderWalker;
2018-05-26 22:47:15 INFO  Main:277 - p.y  private final com.mattunderscore.trees.common.walkers.PostOrderWalker postOrderWalker;
2018-05-26 22:47:15 INFO  Main:277 - p.y  private final com.mattunderscore.trees.common.walkers.PreOrderWalker preOrderWalker;
2018-05-26 22:47:15 INFO  Main:277 - p.y  public TreeWalkerFactoryImpl() {
    breadthFirstWalker = new com.mattunderscore.trees.common.walkers.BreadthFirstWalker();
    inOrderWalker = new com.mattunderscore.trees.common.walkers.InOrderWalker();
    postOrderWalker = new com.mattunderscore.trees.common.walkers.PostOrderWalker();
    preOrderWalker = new com.mattunderscore.trees.common.walkers.PreOrderWalker();
}
2018-05-26 22:47:15 INFO  Main:277 - p.y  @java.lang.Override
public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkBreadthFirst(T tree, com.mattunderscore.trees.traversal.Walker<N> walker) {
    breadthFirstWalker.accept(tree, walker);
}
2018-05-26 22:47:15 INFO  Main:277 - p.y  [E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>]
2018-05-26 22:47:16 INFO  Main:277 - p.y  [T tree, com.mattunderscore.trees.traversal.Walker<N> walker]
2018-05-26 22:47:16 INFO  Main:277 - p.y  T tree
2018-05-26 22:47:16 INFO  Main:277 - p.y  com.mattunderscore.trees.traversal.Walker<N> walker
2018-05-26 22:47:16 INFO  Main:277 - p.y  @java.lang.Override
public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkElementsBreadthFirst(T tree, com.mattunderscore.trees.traversal.Walker<E> walker) {
    final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
    breadthFirstWalker.accept(tree, nodeWalker);
}
2018-05-26 22:47:16 INFO  Main:277 - p.y  [E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>]
2018-05-26 22:47:16 INFO  Main:277 - p.y  [T tree, com.mattunderscore.trees.traversal.Walker<E> walker]
2018-05-26 22:47:16 INFO  Main:277 - p.y  T tree
2018-05-26 22:47:16 INFO  Main:277 - p.y  com.mattunderscore.trees.traversal.Walker<E> walker
2018-05-26 22:47:16 INFO  Main:277 - p.y  @java.lang.Override
public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkElementsInOrder(T tree, com.mattunderscore.trees.traversal.Walker<E> walker) {
    final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
    inOrderWalker.accept(tree, nodeWalker);
}
2018-05-26 22:47:16 INFO  Main:277 - p.y  [E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>]
2018-05-26 22:47:16 INFO  Main:277 - p.y  [T tree, com.mattunderscore.trees.traversal.Walker<E> walker]
2018-05-26 22:47:16 INFO  Main:277 - p.y  T tree
2018-05-26 22:47:16 INFO  Main:277 - p.y  com.mattunderscore.trees.traversal.Walker<E> walker
2018-05-26 22:47:16 INFO  Main:277 - p.y  @java.lang.Override
public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkElementsPostOrder(T tree, com.mattunderscore.trees.traversal.Walker<E> walker) {
    final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
    postOrderWalker.accept(tree, nodeWalker);
}
2018-05-26 22:47:16 INFO  Main:277 - p.y  [E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>]
2018-05-26 22:47:16 INFO  Main:277 - p.y  [T tree, com.mattunderscore.trees.traversal.Walker<E> walker]
2018-05-26 22:47:16 INFO  Main:277 - p.y  T tree
2018-05-26 22:47:16 INFO  Main:277 - p.y  com.mattunderscore.trees.traversal.Walker<E> walker
2018-05-26 22:47:16 INFO  Main:277 - p.y  @java.lang.Override
public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkElementsPreOrder(T tree, com.mattunderscore.trees.traversal.Walker<E> walker) {
    final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
    preOrderWalker.accept(tree, nodeWalker);
}
2018-05-26 22:47:16 INFO  Main:277 - p.y  [E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>]
2018-05-26 22:47:16 INFO  Main:277 - p.y  [T tree, com.mattunderscore.trees.traversal.Walker<E> walker]
2018-05-26 22:47:16 INFO  Main:277 - p.y  T tree
2018-05-26 22:47:16 INFO  Main:277 - p.y  com.mattunderscore.trees.traversal.Walker<E> walker
2018-05-26 22:47:16 INFO  Main:277 - p.y  @java.lang.Override
public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkInOrder(T tree, com.mattunderscore.trees.traversal.Walker<N> walker) {
    inOrderWalker.accept(tree, walker);
}
2018-05-26 22:47:16 INFO  Main:277 - p.y  [E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>]
2018-05-26 22:47:16 INFO  Main:277 - p.y  [T tree, com.mattunderscore.trees.traversal.Walker<N> walker]
2018-05-26 22:47:16 INFO  Main:277 - p.y  T tree
2018-05-26 22:47:16 INFO  Main:277 - p.y  com.mattunderscore.trees.traversal.Walker<N> walker
2018-05-26 22:47:16 INFO  Main:277 - p.y  @java.lang.Override
public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkPostOrder(T tree, com.mattunderscore.trees.traversal.Walker<N> walker) {
    postOrderWalker.accept(tree, walker);
}
2018-05-26 22:47:16 INFO  Main:277 - p.y  [E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>]
2018-05-26 22:47:16 INFO  Main:277 - p.y  [T tree, com.mattunderscore.trees.traversal.Walker<N> walker]
2018-05-26 22:47:16 INFO  Main:277 - p.y  T tree
2018-05-26 22:47:16 INFO  Main:277 - p.y  com.mattunderscore.trees.traversal.Walker<N> walker
2018-05-26 22:47:16 INFO  Main:277 - p.y  @java.lang.Override
public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkPreOrder(T tree, com.mattunderscore.trees.traversal.Walker<N> walker) {
    preOrderWalker.accept(tree, walker);
}
2018-05-26 22:47:16 INFO  Main:277 - p.y  [E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>]
2018-05-26 22:47:16 INFO  Main:277 - p.y  [T tree, com.mattunderscore.trees.traversal.Walker<N> walker]
2018-05-26 22:47:16 INFO  Main:277 - p.y  T tree
2018-05-26 22:47:16 INFO  Main:277 - p.y  com.mattunderscore.trees.traversal.Walker<N> walker
2018-05-27 20:47:48 DEBUG Main:223 - suspicious
2018-05-27 20:47:48 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 55 -1 0.9833333333333334
2018-05-27 20:47:48 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 68 -1 0.95
2018-05-27 20:47:48 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 67 -1 0.9333333333333333
2018-05-27 20:47:48 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 51 -1 0.9166666666666667
2018-05-27 20:47:48 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 65 -1 0.9
2018-05-27 20:47:48 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 47 -1 0.85
2018-05-27 20:47:48 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 46 -1 0.8333333333333334
2018-05-27 20:47:48 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 41 -1 0.75
2018-05-27 20:47:48 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 56 -1 0.5
2018-05-27 20:47:48 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 71 -1 0.5
2018-05-27 20:47:48 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 69 -1 0.5
2018-05-27 20:47:48 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 93 -1 0.5
2018-05-27 20:47:48 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 68 -1 0.48333333333333334
2018-05-27 20:47:48 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 92 -1 0.48333333333333334
2018-05-27 20:47:48 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 54 -1 0.4666666666666667
2018-05-27 20:47:48 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 69 -1 0.4666666666666667
2018-05-27 20:47:48 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 91 -1 0.4666666666666667
2018-05-27 20:47:48 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 53 -1 0.45
2018-05-27 20:47:48 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 52 -1 0.43333333333333335
2018-05-27 20:47:48 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 66 -1 0.4166666666666667
2018-05-27 20:47:48 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 64 -1 0.4166666666666667
2018-05-27 20:47:48 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 63 -1 0.4
2018-05-27 20:47:48 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 87 -1 0.4
2018-05-27 20:47:48 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 49 -1 0.3833333333333333
2018-05-27 20:47:48 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 86 -1 0.3833333333333333
2018-05-27 20:47:48 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 48 -1 0.3666666666666667
2018-05-27 20:47:48 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 85 -1 0.3666666666666667
2018-05-27 20:47:48 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 59 -1 0.33333333333333337
2018-05-27 20:47:48 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 60 -1 0.31666666666666665
2018-05-27 20:47:48 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 58 -1 0.31666666666666665
2018-05-27 20:47:48 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 59 -1 0.3
2018-05-27 20:47:48 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 81 -1 0.3
2018-05-27 20:47:48 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 43 -1 0.2833333333333333
2018-05-27 20:47:48 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 57 -1 0.2833333333333333
2018-05-27 20:47:48 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 80 -1 0.2833333333333333
2018-05-27 20:47:48 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 73 -1 0.26666666666666666
2018-05-27 20:47:48 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 79 -1 0.26666666666666666
2018-05-27 20:47:48 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 54 -1 0.25
2018-05-27 20:47:48 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 53 -1 0.23333333333333334
2018-05-27 20:47:48 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 73 -1 0.23333333333333334
2018-05-27 20:47:48 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 74 -1 0.21666666666666667
2018-05-27 20:47:48 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 75 -1 0.2
2018-05-27 20:47:48 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 49 -1 0.16666666666666669
2018-05-27 20:47:48 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 48 -1 0.15000000000000002
2018-05-27 20:47:48 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 47 -1 0.13333333333333336
2018-05-27 20:47:48 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 46 -1 0.11666666666666664
2018-05-27 20:47:48 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 45 -1 0.09999999999999998
2018-05-27 20:47:48 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 39 -1 0.0
2018-05-27 20:47:48 DEBUG Main:227 - ------------------------------
2018-05-27 20:47:48 INFO  Main:263 - Node:  try {
    accept(rootLevel, walker);
    walker.onCompleted();
} catch (com.mattunderscore.trees.common.walkers.Done done) {
    done.printStackTrace();
}
2018-05-27 20:47:48 INFO  Main:264 - [CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 20:47:48 DEBUG Main:268 - size 5
2018-05-27 20:47:48 INFO  Main:279 - p.x[CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 20:47:48 INFO  Main:280 - p.y  [try {
    accept(rootLevel, walker);
    walker.onCompleted();
} catch (com.mattunderscore.trees.common.walkers.Done done) {
    done.printStackTrace();
}]
2018-05-27 20:47:59 INFO  Main:279 - p.x[CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 20:47:59 INFO  Main:280 - p.y  try {
    accept(rootLevel, walker);
    walker.onCompleted();
} catch (com.mattunderscore.trees.common.walkers.Done done) {
    done.printStackTrace();
}
2018-05-27 20:48:16 INFO  Main:279 - p.x[CtTryImpl, CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 20:48:16 INFO  Main:280 - p.y  [ catch (com.mattunderscore.trees.common.walkers.Done done) {
    done.printStackTrace();
}]
2018-05-27 20:50:35 INFO  Main:279 - p.x[CtTryImpl, CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 20:50:35 INFO  Main:280 - p.y   catch (com.mattunderscore.trees.common.walkers.Done done) {
    done.printStackTrace();
}
2018-05-27 20:52:51 INFO  Main:279 - p.x[CtTryImpl, CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtCatchImpl, CtMethodImpl]
2018-05-27 20:52:51 INFO  Main:280 - p.y  com.mattunderscore.trees.common.walkers.Done done
2018-05-27 20:55:24 INFO  Main:263 - Node:  if (!(walker.onNext(node))) {
    throw new com.mattunderscore.trees.common.walkers.Done();
} 
2018-05-27 20:55:24 INFO  Main:264 - [CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtForEachImpl, CtMethodImpl]
2018-05-27 20:55:24 DEBUG Main:268 - size 8
2018-05-27 20:55:24 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtForEachImpl, CtMethodImpl]
2018-05-27 20:55:24 INFO  Main:280 - p.y  [if (!(walker.onNext(node))) {
    throw new com.mattunderscore.trees.common.walkers.Done();
} ]
2018-05-27 20:55:30 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtForEachImpl, CtMethodImpl]
2018-05-27 20:55:30 INFO  Main:280 - p.y  [if (!(walker.onNext(node))) {
    throw new com.mattunderscore.trees.common.walkers.Done();
} , nextLevel.addAll(((java.util.Collection<N>)(node.getChildren())))]
2018-05-27 20:55:31 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtForEachImpl, CtMethodImpl]
2018-05-27 20:55:31 INFO  Main:280 - p.y  if (!(walker.onNext(node))) {
    throw new com.mattunderscore.trees.common.walkers.Done();
} 
2018-05-27 20:55:52 INFO  Main:279 - p.x[CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtForEachImpl, CtMethodImpl]
2018-05-27 20:55:52 INFO  Main:280 - p.y  !(walker.onNext(node))
2018-05-27 20:57:55 INFO  Main:279 - p.x[CtIfImpl, CtPackageImpl, CtUnaryOperatorImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtForEachImpl, CtMethodImpl]
2018-05-27 20:57:55 INFO  Main:280 - p.y  (walker.onNext(node))
2018-05-27 21:00:08 INFO  Main:279 - p.x[CtIfImpl, CtPackageImpl, CtUnaryOperatorImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtForEachImpl, CtMethodImpl]
2018-05-27 21:00:08 INFO  Main:280 - p.y  [node]
2018-05-27 21:00:17 INFO  Main:279 - p.x[CtIfImpl, CtPackageImpl, CtUnaryOperatorImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtForEachImpl, CtMethodImpl]
2018-05-27 21:00:17 INFO  Main:280 - p.y  walker
2018-05-27 21:00:19 INFO  Main:279 - p.x[CtIfImpl, CtPackageImpl, CtUnaryOperatorImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtForEachImpl, CtMethodImpl]
2018-05-27 21:00:19 INFO  Main:280 - p.y  node
2018-05-27 21:02:12 INFO  Main:263 - Node:  for (final N node : currentLevel) {
    if (!(walker.onNext(node))) {
        throw new com.mattunderscore.trees.common.walkers.Done();
    } 
    nextLevel.addAll(((java.util.Collection<N>)(node.getChildren())));
}
2018-05-27 21:02:12 INFO  Main:264 - [CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:02:12 DEBUG Main:268 - size 5
2018-05-27 21:02:12 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:02:12 INFO  Main:280 - p.y  [for (final N node : currentLevel) {
    if (!(walker.onNext(node))) {
        throw new com.mattunderscore.trees.common.walkers.Done();
    } 
    nextLevel.addAll(((java.util.Collection<N>)(node.getChildren())));
}]
2018-05-27 21:02:18 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:02:18 INFO  Main:280 - p.y  [for (final N node : currentLevel) {
    if (!(walker.onNext(node))) {
        throw new com.mattunderscore.trees.common.walkers.Done();
    } 
    nextLevel.addAll(((java.util.Collection<N>)(node.getChildren())));
}, accept(nextLevel, walker)]
2018-05-27 21:02:19 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:02:19 INFO  Main:280 - p.y  for (final N node : currentLevel) {
    if (!(walker.onNext(node))) {
        throw new com.mattunderscore.trees.common.walkers.Done();
    } 
    nextLevel.addAll(((java.util.Collection<N>)(node.getChildren())));
}
2018-05-27 21:02:38 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl, CtForEachImpl]
2018-05-27 21:02:38 INFO  Main:280 - p.y  final N node
2018-05-27 21:02:39 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl, CtForEachImpl]
2018-05-27 21:02:39 INFO  Main:280 - p.y  currentLevel
2018-05-27 21:04:35 INFO  Main:263 - Node:  {
    final N node = tree.getRoot();
    final java.util.List<N> rootLevel = new java.util.ArrayList<>(1);
    rootLevel.add(node);
    try {
        accept(rootLevel, walker);
        walker.onCompleted();
    } catch (com.mattunderscore.trees.common.walkers.Done done) {
        done.printStackTrace();
    }
}
2018-05-27 21:04:35 INFO  Main:264 - [CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:04:35 DEBUG Main:268 - size 2
2018-05-27 21:04:35 INFO  Main:279 - p.x[CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:04:35 INFO  Main:280 - p.y  {
    final N node = tree.getRoot();
    final java.util.List<N> rootLevel = new java.util.ArrayList<>(1);
    rootLevel.add(node);
    try {
        accept(rootLevel, walker);
        walker.onCompleted();
    } catch (com.mattunderscore.trees.common.walkers.Done done) {
        done.printStackTrace();
    }
}
2018-05-27 21:04:54 INFO  Main:279 - p.x[CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:04:54 INFO  Main:280 - p.y  [final N node = tree.getRoot(), final java.util.List<N> rootLevel = new java.util.ArrayList<>(1), rootLevel.add(node), try {
    accept(rootLevel, walker);
    walker.onCompleted();
} catch (com.mattunderscore.trees.common.walkers.Done done) {
    done.printStackTrace();
}]
2018-05-27 21:04:55 INFO  Main:263 - Node:  {
    final java.util.List<N> nextLevel = new java.util.ArrayList<>(((currentLevel.size()) * 2));
    for (final N node : currentLevel) {
        if (!(walker.onNext(node))) {
            throw new com.mattunderscore.trees.common.walkers.Done();
        } 
        nextLevel.addAll(((java.util.Collection<N>)(node.getChildren())));
    }
    accept(nextLevel, walker);
}
2018-05-27 21:04:55 INFO  Main:264 - [CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:04:55 DEBUG Main:268 - size 2
2018-05-27 21:04:55 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:04:55 INFO  Main:280 - p.y  {
    final java.util.List<N> nextLevel = new java.util.ArrayList<>(((currentLevel.size()) * 2));
    for (final N node : currentLevel) {
        if (!(walker.onNext(node))) {
            throw new com.mattunderscore.trees.common.walkers.Done();
        } 
        nextLevel.addAll(((java.util.Collection<N>)(node.getChildren())));
    }
    accept(nextLevel, walker);
}
2018-05-27 21:04:55 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:04:55 INFO  Main:280 - p.y  [final java.util.List<N> nextLevel = new java.util.ArrayList<>(((currentLevel.size()) * 2)), for (final N node : currentLevel) {
    if (!(walker.onNext(node))) {
        throw new com.mattunderscore.trees.common.walkers.Done();
    } 
    nextLevel.addAll(((java.util.Collection<N>)(node.getChildren())));
}, accept(nextLevel, walker)]
2018-05-27 21:04:55 INFO  Main:263 - Node:  if (tree.isEmpty()) {
    walker.onEmpty();
    walker.onCompleted();
} else {
    final N node = tree.getRoot();
    final java.util.List<N> rootLevel = new java.util.ArrayList<>(1);
    rootLevel.add(node);
    try {
        accept(rootLevel, walker);
        walker.onCompleted();
    } catch (com.mattunderscore.trees.common.walkers.Done done) {
        done.printStackTrace();
    }
}
2018-05-27 21:04:55 INFO  Main:264 - [CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:04:55 DEBUG Main:268 - size 4
2018-05-27 21:04:55 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:04:55 INFO  Main:280 - p.y  [if (tree.isEmpty()) {
    walker.onEmpty();
    walker.onCompleted();
} else {
    final N node = tree.getRoot();
    final java.util.List<N> rootLevel = new java.util.ArrayList<>(1);
    rootLevel.add(node);
    try {
        accept(rootLevel, walker);
        walker.onCompleted();
    } catch (com.mattunderscore.trees.common.walkers.Done done) {
        done.printStackTrace();
    }
}]
2018-05-27 21:05:00 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:05:00 INFO  Main:280 - p.y  if (tree.isEmpty()) {
    walker.onEmpty();
    walker.onCompleted();
} else {
    final N node = tree.getRoot();
    final java.util.List<N> rootLevel = new java.util.ArrayList<>(1);
    rootLevel.add(node);
    try {
        accept(rootLevel, walker);
        walker.onCompleted();
    } catch (com.mattunderscore.trees.common.walkers.Done done) {
        done.printStackTrace();
    }
}
2018-05-27 21:05:17 INFO  Main:279 - p.x[CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:05:17 INFO  Main:280 - p.y  tree.isEmpty()
2018-05-27 21:05:53 INFO  Main:279 - p.x[CtIfImpl, CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:05:53 INFO  Main:280 - p.y  tree
2018-05-27 21:05:53 INFO  Main:263 - Node:  {
    if (tree.isEmpty()) {
        walker.onEmpty();
        walker.onCompleted();
    } else {
        final N node = tree.getRoot();
        final java.util.List<N> rootLevel = new java.util.ArrayList<>(1);
        rootLevel.add(node);
        try {
            accept(rootLevel, walker);
            walker.onCompleted();
        } catch (com.mattunderscore.trees.common.walkers.Done done) {
            done.printStackTrace();
        }
    }
}
2018-05-27 21:05:53 INFO  Main:264 - [CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:05:53 DEBUG Main:268 - size 2
2018-05-27 21:05:53 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:05:53 INFO  Main:280 - p.y  {
    if (tree.isEmpty()) {
        walker.onEmpty();
        walker.onCompleted();
    } else {
        final N node = tree.getRoot();
        final java.util.List<N> rootLevel = new java.util.ArrayList<>(1);
        rootLevel.add(node);
        try {
            accept(rootLevel, walker);
            walker.onCompleted();
        } catch (com.mattunderscore.trees.common.walkers.Done done) {
            done.printStackTrace();
        }
    }
}
2018-05-27 21:05:53 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:05:53 INFO  Main:280 - p.y  [if (tree.isEmpty()) {
    walker.onEmpty();
    walker.onCompleted();
} else {
    final N node = tree.getRoot();
    final java.util.List<N> rootLevel = new java.util.ArrayList<>(1);
    rootLevel.add(node);
    try {
        accept(rootLevel, walker);
        walker.onCompleted();
    } catch (com.mattunderscore.trees.common.walkers.Done done) {
        done.printStackTrace();
    }
}]
2018-05-27 21:05:59 INFO  Main:263 - Node:  @net.jcip.annotations.Immutable
public final class BreadthFirstWalker {
    public BreadthFirstWalker() {
    }

    public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void accept(T tree, com.mattunderscore.trees.traversal.Walker<N> walker) {
        if (tree.isEmpty()) {
            walker.onEmpty();
            walker.onCompleted();
        } else {
            final N node = tree.getRoot();
            final java.util.List<N> rootLevel = new java.util.ArrayList<>(1);
            rootLevel.add(node);
            try {
                accept(rootLevel, walker);
                walker.onCompleted();
            } catch (com.mattunderscore.trees.common.walkers.Done done) {
                done.printStackTrace();
            }
        }
    }

    private <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void accept(java.util.List<N> currentLevel, com.mattunderscore.trees.traversal.Walker<N> walker) throws com.mattunderscore.trees.common.walkers.Done {
        final java.util.List<N> nextLevel = new java.util.ArrayList<>(((currentLevel.size()) * 2));
        for (final N node : currentLevel) {
            if (!(walker.onNext(node))) {
                throw new com.mattunderscore.trees.common.walkers.Done();
            } 
            nextLevel.addAll(((java.util.Collection<N>)(node.getChildren())));
        }
        accept(nextLevel, walker);
    }
}
2018-05-27 21:05:59 INFO  Main:264 - [CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage]
2018-05-27 21:05:59 DEBUG Main:268 - size 15
2018-05-27 21:05:59 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage]
2018-05-27 21:05:59 INFO  Main:280 - p.y  @net.jcip.annotations.Immutable
public final class BreadthFirstWalker {
    public BreadthFirstWalker() {
    }

    public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void accept(T tree, com.mattunderscore.trees.traversal.Walker<N> walker) {
        if (tree.isEmpty()) {
            walker.onEmpty();
            walker.onCompleted();
        } else {
            final N node = tree.getRoot();
            final java.util.List<N> rootLevel = new java.util.ArrayList<>(1);
            rootLevel.add(node);
            try {
                accept(rootLevel, walker);
                walker.onCompleted();
            } catch (com.mattunderscore.trees.common.walkers.Done done) {
                done.printStackTrace();
            }
        }
    }

    private <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void accept(java.util.List<N> currentLevel, com.mattunderscore.trees.traversal.Walker<N> walker) throws com.mattunderscore.trees.common.walkers.Done {
        final java.util.List<N> nextLevel = new java.util.ArrayList<>(((currentLevel.size()) * 2));
        for (final N node : currentLevel) {
            if (!(walker.onNext(node))) {
                throw new com.mattunderscore.trees.common.walkers.Done();
            } 
            nextLevel.addAll(((java.util.Collection<N>)(node.getChildren())));
        }
        accept(nextLevel, walker);
    }
}
2018-05-27 21:05:59 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl]
2018-05-27 21:05:59 INFO  Main:280 - p.y  [public BreadthFirstWalker() {
}]
2018-05-27 21:05:59 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl]
2018-05-27 21:05:59 INFO  Main:280 - p.y  [public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void accept(T tree, com.mattunderscore.trees.traversal.Walker<N> walker) {
    if (tree.isEmpty()) {
        walker.onEmpty();
        walker.onCompleted();
    } else {
        final N node = tree.getRoot();
        final java.util.List<N> rootLevel = new java.util.ArrayList<>(1);
        rootLevel.add(node);
        try {
            accept(rootLevel, walker);
            walker.onCompleted();
        } catch (com.mattunderscore.trees.common.walkers.Done done) {
            done.printStackTrace();
        }
    }
}, private <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void accept(java.util.List<N> currentLevel, com.mattunderscore.trees.traversal.Walker<N> walker) throws com.mattunderscore.trees.common.walkers.Done {
    final java.util.List<N> nextLevel = new java.util.ArrayList<>(((currentLevel.size()) * 2));
    for (final N node : currentLevel) {
        if (!(walker.onNext(node))) {
            throw new com.mattunderscore.trees.common.walkers.Done();
        } 
        nextLevel.addAll(((java.util.Collection<N>)(node.getChildren())));
    }
    accept(nextLevel, walker);
}]
2018-05-27 21:05:59 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl]
2018-05-27 21:05:59 INFO  Main:280 - p.y  public BreadthFirstWalker() {
}
2018-05-27 21:05:59 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl]
2018-05-27 21:05:59 INFO  Main:280 - p.y  public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void accept(T tree, com.mattunderscore.trees.traversal.Walker<N> walker) {
    if (tree.isEmpty()) {
        walker.onEmpty();
        walker.onCompleted();
    } else {
        final N node = tree.getRoot();
        final java.util.List<N> rootLevel = new java.util.ArrayList<>(1);
        rootLevel.add(node);
        try {
            accept(rootLevel, walker);
            walker.onCompleted();
        } catch (com.mattunderscore.trees.common.walkers.Done done) {
            done.printStackTrace();
        }
    }
}
2018-05-27 21:05:59 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:05:59 INFO  Main:280 - p.y  [E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>]
2018-05-27 21:05:59 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:05:59 INFO  Main:280 - p.y  [T tree, com.mattunderscore.trees.traversal.Walker<N> walker]
2018-05-27 21:05:59 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:05:59 INFO  Main:280 - p.y  T tree
2018-05-27 21:05:59 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:05:59 INFO  Main:280 - p.y  com.mattunderscore.trees.traversal.Walker<N> walker
2018-05-27 21:05:59 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl]
2018-05-27 21:05:59 INFO  Main:280 - p.y  private <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void accept(java.util.List<N> currentLevel, com.mattunderscore.trees.traversal.Walker<N> walker) throws com.mattunderscore.trees.common.walkers.Done {
    final java.util.List<N> nextLevel = new java.util.ArrayList<>(((currentLevel.size()) * 2));
    for (final N node : currentLevel) {
        if (!(walker.onNext(node))) {
            throw new com.mattunderscore.trees.common.walkers.Done();
        } 
        nextLevel.addAll(((java.util.Collection<N>)(node.getChildren())));
    }
    accept(nextLevel, walker);
}
2018-05-27 21:05:59 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:05:59 INFO  Main:280 - p.y  [E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>]
2018-05-27 21:05:59 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:05:59 INFO  Main:280 - p.y  [java.util.List<N> currentLevel, com.mattunderscore.trees.traversal.Walker<N> walker]
2018-05-27 21:05:59 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:05:59 INFO  Main:280 - p.y  [com.mattunderscore.trees.common.walkers.Done]
2018-05-27 21:05:59 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:05:59 INFO  Main:280 - p.y  java.util.List<N> currentLevel
2018-05-27 21:05:59 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:05:59 INFO  Main:280 - p.y  com.mattunderscore.trees.traversal.Walker<N> walker
2018-05-27 21:05:59 INFO  Main:263 - Node:  accept(rootLevel, walker)
2018-05-27 21:05:59 INFO  Main:264 - [CtTryImpl, CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:05:59 DEBUG Main:268 - size 6
2018-05-27 21:05:59 INFO  Main:279 - p.x[CtTryImpl, CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:05:59 INFO  Main:280 - p.y  [accept(rootLevel, walker)]
2018-05-27 21:06:05 INFO  Main:279 - p.x[CtTryImpl, CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:06:05 INFO  Main:280 - p.y  [accept(rootLevel, walker), walker.onCompleted()]
2018-05-27 21:06:08 INFO  Main:279 - p.x[CtTryImpl, CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:06:08 INFO  Main:280 - p.y  accept(rootLevel, walker)
2018-05-27 21:06:18 INFO  Main:279 - p.x[CtTryImpl, CtIfImpl, CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:06:18 INFO  Main:280 - p.y  [rootLevel, walker]
2018-05-27 21:06:19 INFO  Main:279 - p.x[CtTryImpl, CtIfImpl, CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:06:19 INFO  Main:280 - p.y  rootLevel
2018-05-27 21:06:21 INFO  Main:279 - p.x[CtTryImpl, CtIfImpl, CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:06:21 INFO  Main:280 - p.y  walker
2018-05-27 21:06:22 INFO  Main:263 - Node:  nextLevel.addAll(((java.util.Collection<N>)(node.getChildren())))
2018-05-27 21:06:22 INFO  Main:264 - [CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtForEachImpl, CtMethodImpl]
2018-05-27 21:06:22 DEBUG Main:268 - size 7
2018-05-27 21:06:22 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtForEachImpl, CtMethodImpl]
2018-05-27 21:06:22 INFO  Main:280 - p.y  [nextLevel.addAll(((java.util.Collection<N>)(node.getChildren())))]
2018-05-27 21:06:30 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtForEachImpl, CtMethodImpl]
2018-05-27 21:06:30 INFO  Main:280 - p.y  nextLevel.addAll(((java.util.Collection<N>)(node.getChildren())))
2018-05-27 21:06:52 INFO  Main:279 - p.x[CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtForEachImpl, CtMethodImpl]
2018-05-27 21:06:52 INFO  Main:280 - p.y  [((java.util.Collection<N>)(node.getChildren()))]
2018-05-27 21:06:56 INFO  Main:279 - p.x[CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtForEachImpl, CtMethodImpl]
2018-05-27 21:06:56 INFO  Main:280 - p.y  nextLevel
2018-05-27 21:06:59 INFO  Main:279 - p.x[CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtForEachImpl, CtMethodImpl]
2018-05-27 21:06:59 INFO  Main:280 - p.y  ((java.util.Collection<N>)(node.getChildren()))
2018-05-27 21:07:04 INFO  Main:279 - p.x[CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtForEachImpl, CtMethodImpl]
2018-05-27 21:07:04 INFO  Main:280 - p.y  [java.util.Collection<N>]
2018-05-27 21:07:04 INFO  Main:279 - p.x[CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtForEachImpl, CtMethodImpl]
2018-05-27 21:07:04 INFO  Main:280 - p.y  node
2018-05-27 21:07:05 INFO  Main:263 - Node:  breadthFirstWalker.accept(tree, walker)
2018-05-27 21:07:05 INFO  Main:264 - [CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:07:05 DEBUG Main:268 - size 6
2018-05-27 21:07:05 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:07:05 INFO  Main:280 - p.y  [breadthFirstWalker.accept(tree, walker)]
2018-05-27 21:07:12 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:07:12 INFO  Main:280 - p.y  breadthFirstWalker.accept(tree, walker)
2018-05-27 21:07:33 INFO  Main:279 - p.x[CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:07:33 INFO  Main:280 - p.y  [tree, walker]
2018-05-27 21:07:33 INFO  Main:279 - p.x[CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:07:33 INFO  Main:280 - p.y  breadthFirstWalker
2018-05-27 21:07:35 INFO  Main:279 - p.x[CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:07:35 INFO  Main:280 - p.y  tree
2018-05-27 21:08:23 INFO  Main:279 - p.x[CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:08:23 INFO  Main:280 - p.y  walker
2018-05-27 21:08:25 INFO  Main:263 - Node:  breadthFirstWalker.accept(tree, nodeWalker)
2018-05-27 21:08:25 INFO  Main:264 - [CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:08:25 DEBUG Main:268 - size 6
2018-05-27 21:08:25 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:08:25 INFO  Main:280 - p.y  [breadthFirstWalker.accept(tree, nodeWalker)]
2018-05-27 21:08:30 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:08:30 INFO  Main:280 - p.y  breadthFirstWalker.accept(tree, nodeWalker)
2018-05-27 21:09:01 INFO  Main:279 - p.x[CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:09:01 INFO  Main:280 - p.y  [tree, nodeWalker]
2018-05-27 21:09:01 INFO  Main:279 - p.x[CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:09:01 INFO  Main:280 - p.y  breadthFirstWalker
2018-05-27 21:09:02 INFO  Main:279 - p.x[CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:09:02 INFO  Main:280 - p.y  tree
2018-05-27 21:10:39 INFO  Main:279 - p.x[CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:10:39 INFO  Main:280 - p.y  nodeWalker
2018-05-27 21:10:42 INFO  Main:263 - Node:  {
    breadthFirstWalker.accept(tree, walker);
}
2018-05-27 21:10:42 INFO  Main:264 - [CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:10:42 DEBUG Main:268 - size 2
2018-05-27 21:10:42 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:10:42 INFO  Main:280 - p.y  {
    breadthFirstWalker.accept(tree, walker);
}
2018-05-27 21:10:42 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:10:42 INFO  Main:280 - p.y  [breadthFirstWalker.accept(tree, walker)]
2018-05-27 21:10:47 INFO  Main:263 - Node:  final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker)
2018-05-27 21:10:47 INFO  Main:264 - [CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:10:47 DEBUG Main:268 - size 6
2018-05-27 21:10:47 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:10:47 INFO  Main:280 - p.y  [final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker)]
2018-05-27 21:10:47 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:10:47 INFO  Main:280 - p.y  [final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker), breadthFirstWalker.accept(tree, nodeWalker)]
2018-05-27 21:10:47 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:10:47 INFO  Main:280 - p.y  final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker)
2018-05-27 21:10:48 INFO  Main:279 - p.x[CtLocalVariableImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:10:48 INFO  Main:280 - p.y  new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker)
2018-05-27 21:10:51 INFO  Main:279 - p.x[CtLocalVariableImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl, CtConstructorCallImpl]
2018-05-27 21:10:51 INFO  Main:280 - p.y  [walker]
2018-05-27 21:10:52 INFO  Main:279 - p.x[CtLocalVariableImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl, CtConstructorCallImpl]
2018-05-27 21:10:52 INFO  Main:280 - p.y  walker
2018-05-27 21:10:54 INFO  Main:263 - Node:  rootLevel.add(node)
2018-05-27 21:10:54 INFO  Main:264 - [CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:10:54 DEBUG Main:268 - size 6
2018-05-27 21:10:54 INFO  Main:279 - p.x[CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:10:54 INFO  Main:280 - p.y  [rootLevel.add(node)]
2018-05-27 21:11:00 INFO  Main:279 - p.x[CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:11:00 INFO  Main:280 - p.y  [rootLevel.add(node), try {
    accept(rootLevel, walker);
    walker.onCompleted();
} catch (com.mattunderscore.trees.common.walkers.Done done) {
    done.printStackTrace();
}]
2018-05-27 21:11:02 INFO  Main:279 - p.x[CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:11:02 INFO  Main:280 - p.y  rootLevel.add(node)
2018-05-27 21:11:20 INFO  Main:279 - p.x[CtIfImpl, CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:11:20 INFO  Main:280 - p.y  [node]
2018-05-27 21:11:27 INFO  Main:279 - p.x[CtIfImpl, CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:11:27 INFO  Main:280 - p.y  rootLevel
2018-05-27 21:11:29 INFO  Main:279 - p.x[CtIfImpl, CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:11:29 INFO  Main:280 - p.y  node
2018-05-27 21:12:47 INFO  Main:263 - Node:  throw new com.mattunderscore.trees.common.walkers.Done()
2018-05-27 21:12:47 INFO  Main:264 - [CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtForEachImpl, CtMethodImpl]
2018-05-27 21:12:47 DEBUG Main:268 - size 3
2018-05-27 21:12:47 INFO  Main:279 - p.x[CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtForEachImpl, CtMethodImpl]
2018-05-27 21:12:47 INFO  Main:280 - p.y  [throw new com.mattunderscore.trees.common.walkers.Done()]
2018-05-27 21:12:53 INFO  Main:279 - p.x[CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtForEachImpl, CtMethodImpl]
2018-05-27 21:12:53 INFO  Main:280 - p.y  throw new com.mattunderscore.trees.common.walkers.Done()
2018-05-27 21:13:08 INFO  Main:279 - p.x[CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtForEachImpl, CtMethodImpl, CtThrowImpl]
2018-05-27 21:13:08 INFO  Main:280 - p.y  new com.mattunderscore.trees.common.walkers.Done()
2018-05-27 21:17:05 INFO  Main:263 - Node:  {
    final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
    breadthFirstWalker.accept(tree, nodeWalker);
}
2018-05-27 21:17:05 INFO  Main:264 - [CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:17:05 DEBUG Main:268 - size 2
2018-05-27 21:17:05 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:17:05 INFO  Main:280 - p.y  {
    final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
    breadthFirstWalker.accept(tree, nodeWalker);
}
2018-05-27 21:17:05 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:17:05 INFO  Main:280 - p.y  [final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker), breadthFirstWalker.accept(tree, nodeWalker)]
2018-05-27 21:17:05 INFO  Main:263 - Node:  final java.util.List<N> rootLevel = new java.util.ArrayList<>(1)
2018-05-27 21:17:05 INFO  Main:264 - [CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:17:05 DEBUG Main:268 - size 7
2018-05-27 21:17:05 INFO  Main:279 - p.x[CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:17:05 INFO  Main:280 - p.y  [final java.util.List<N> rootLevel = new java.util.ArrayList<>(1)]
2018-05-27 21:17:06 INFO  Main:279 - p.x[CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:17:06 INFO  Main:280 - p.y  [final java.util.List<N> rootLevel = new java.util.ArrayList<>(1), rootLevel.add(node)]
2018-05-27 21:17:06 INFO  Main:279 - p.x[CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:17:06 INFO  Main:280 - p.y  [final java.util.List<N> rootLevel = new java.util.ArrayList<>(1), rootLevel.add(node), try {
    accept(rootLevel, walker);
    walker.onCompleted();
} catch (com.mattunderscore.trees.common.walkers.Done done) {
    done.printStackTrace();
}]
2018-05-27 21:17:06 INFO  Main:279 - p.x[CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:17:06 INFO  Main:280 - p.y  final java.util.List<N> rootLevel = new java.util.ArrayList<>(1)
2018-05-27 21:17:07 INFO  Main:279 - p.x[CtLocalVariableImpl, CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:17:07 INFO  Main:280 - p.y  new java.util.ArrayList<>(1)
2018-05-27 21:17:09 INFO  Main:279 - p.x[CtLocalVariableImpl, CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl, CtConstructorCallImpl]
2018-05-27 21:17:09 INFO  Main:280 - p.y  [1]
2018-05-27 21:17:13 INFO  Main:279 - p.x[CtLocalVariableImpl, CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl, CtConstructorCallImpl]
2018-05-27 21:17:13 INFO  Main:280 - p.y  1
2018-05-27 21:17:14 INFO  Main:263 - Node:  final N node = tree.getRoot()
2018-05-27 21:17:14 INFO  Main:264 - [CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:17:14 DEBUG Main:268 - size 7
2018-05-27 21:17:14 INFO  Main:279 - p.x[CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:17:14 INFO  Main:280 - p.y  [final N node = tree.getRoot()]
2018-05-27 21:17:15 INFO  Main:279 - p.x[CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:17:15 INFO  Main:280 - p.y  [final N node = tree.getRoot(), final java.util.List<N> rootLevel = new java.util.ArrayList<>(1)]
2018-05-27 21:17:15 INFO  Main:279 - p.x[CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:17:15 INFO  Main:280 - p.y  [final N node = tree.getRoot(), final java.util.List<N> rootLevel = new java.util.ArrayList<>(1), rootLevel.add(node)]
2018-05-27 21:17:15 INFO  Main:279 - p.x[CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:17:15 INFO  Main:280 - p.y  [final N node = tree.getRoot(), final java.util.List<N> rootLevel = new java.util.ArrayList<>(1), rootLevel.add(node), try {
    accept(rootLevel, walker);
    walker.onCompleted();
} catch (com.mattunderscore.trees.common.walkers.Done done) {
    done.printStackTrace();
}]
2018-05-27 21:17:16 INFO  Main:279 - p.x[CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:17:16 INFO  Main:280 - p.y  final N node = tree.getRoot()
2018-05-27 21:17:18 INFO  Main:279 - p.x[CtLocalVariableImpl, CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:17:18 INFO  Main:280 - p.y  tree.getRoot()
2018-05-27 21:18:21 INFO  Main:279 - p.x[CtLocalVariableImpl, CtIfImpl, CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:18:21 INFO  Main:280 - p.y  tree
2018-05-27 21:18:22 INFO  Main:263 - Node:  final java.util.List<N> nextLevel = new java.util.ArrayList<>(((currentLevel.size()) * 2))
2018-05-27 21:18:22 INFO  Main:264 - [CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:18:22 DEBUG Main:268 - size 10
2018-05-27 21:18:22 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:18:22 INFO  Main:280 - p.y  [final java.util.List<N> nextLevel = new java.util.ArrayList<>(((currentLevel.size()) * 2))]
2018-05-27 21:18:23 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:18:23 INFO  Main:280 - p.y  [final java.util.List<N> nextLevel = new java.util.ArrayList<>(((currentLevel.size()) * 2)), for (final N node : currentLevel) {
    if (!(walker.onNext(node))) {
        throw new com.mattunderscore.trees.common.walkers.Done();
    } 
    nextLevel.addAll(((java.util.Collection<N>)(node.getChildren())));
}]
2018-05-27 21:18:23 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:18:23 INFO  Main:280 - p.y  [final java.util.List<N> nextLevel = new java.util.ArrayList<>(((currentLevel.size()) * 2)), for (final N node : currentLevel) {
    if (!(walker.onNext(node))) {
        throw new com.mattunderscore.trees.common.walkers.Done();
    } 
    nextLevel.addAll(((java.util.Collection<N>)(node.getChildren())));
}, accept(nextLevel, walker)]
2018-05-27 21:18:24 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:18:24 INFO  Main:280 - p.y  final java.util.List<N> nextLevel = new java.util.ArrayList<>(((currentLevel.size()) * 2))
2018-05-27 21:18:25 INFO  Main:279 - p.x[CtLocalVariableImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:18:25 INFO  Main:280 - p.y  new java.util.ArrayList<>(((currentLevel.size()) * 2))
2018-05-27 21:18:28 INFO  Main:279 - p.x[CtLocalVariableImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl, CtConstructorCallImpl]
2018-05-27 21:18:28 INFO  Main:280 - p.y  [((currentLevel.size()) * 2)]
2018-05-27 21:18:32 INFO  Main:279 - p.x[CtLocalVariableImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl, CtConstructorCallImpl]
2018-05-27 21:18:32 INFO  Main:280 - p.y  ((currentLevel.size()) * 2)
2018-05-27 21:18:36 INFO  Main:279 - p.x[CtLocalVariableImpl, CtPackageImpl, CtBinaryOperatorImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl, CtConstructorCallImpl]
2018-05-27 21:18:36 INFO  Main:280 - p.y  (currentLevel.size())
2018-05-27 21:18:40 INFO  Main:279 - p.x[CtLocalVariableImpl, CtPackageImpl, CtBinaryOperatorImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl, CtConstructorCallImpl]
2018-05-27 21:18:40 INFO  Main:280 - p.y  currentLevel
2018-05-27 21:18:42 INFO  Main:279 - p.x[CtLocalVariableImpl, CtPackageImpl, CtBinaryOperatorImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl, CtConstructorCallImpl]
2018-05-27 21:18:42 INFO  Main:280 - p.y  2
2018-05-27 21:18:45 INFO  Main:263 - Node:  postOrderWalker.accept(tree, walker)
2018-05-27 21:18:45 INFO  Main:264 - [CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:18:45 DEBUG Main:268 - size 6
2018-05-27 21:18:45 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:18:45 INFO  Main:280 - p.y  [postOrderWalker.accept(tree, walker)]
2018-05-27 21:18:51 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:18:51 INFO  Main:280 - p.y  postOrderWalker.accept(tree, walker)
2018-05-27 21:19:12 INFO  Main:279 - p.x[CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:19:12 INFO  Main:280 - p.y  [tree, walker]
2018-05-27 21:19:12 INFO  Main:279 - p.x[CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:19:12 INFO  Main:280 - p.y  postOrderWalker
2018-05-27 21:19:13 INFO  Main:279 - p.x[CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:19:13 INFO  Main:280 - p.y  tree
2018-05-27 21:19:59 INFO  Main:279 - p.x[CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:19:59 INFO  Main:280 - p.y  walker
2018-05-27 21:20:00 INFO  Main:263 - Node:  {
    postOrderWalker.accept(tree, walker);
}
2018-05-27 21:20:00 INFO  Main:264 - [CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:20:00 DEBUG Main:268 - size 2
2018-05-27 21:20:00 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:20:00 INFO  Main:280 - p.y  {
    postOrderWalker.accept(tree, walker);
}
2018-05-27 21:20:00 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:20:00 INFO  Main:280 - p.y  [postOrderWalker.accept(tree, walker)]
2018-05-27 21:20:06 INFO  Main:263 - Node:  postOrderWalker.accept(tree, nodeWalker)
2018-05-27 21:20:06 INFO  Main:264 - [CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:20:06 DEBUG Main:268 - size 6
2018-05-27 21:20:06 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:20:06 INFO  Main:280 - p.y  [postOrderWalker.accept(tree, nodeWalker)]
2018-05-27 21:20:12 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:20:12 INFO  Main:280 - p.y  postOrderWalker.accept(tree, nodeWalker)
2018-05-27 21:20:51 INFO  Main:279 - p.x[CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:20:51 INFO  Main:280 - p.y  [tree, nodeWalker]
2018-05-27 21:20:51 INFO  Main:279 - p.x[CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:20:51 INFO  Main:280 - p.y  postOrderWalker
2018-05-27 21:20:52 INFO  Main:279 - p.x[CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:20:52 INFO  Main:280 - p.y  tree
2018-05-27 21:22:26 INFO  Main:279 - p.x[CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:22:26 INFO  Main:280 - p.y  nodeWalker
2018-05-27 21:22:28 INFO  Main:263 - Node:  walker.onCompleted()
2018-05-27 21:22:28 INFO  Main:264 - [CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:22:28 DEBUG Main:268 - size 3
2018-05-27 21:22:28 INFO  Main:279 - p.x[CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:22:28 INFO  Main:280 - p.y  [walker.onCompleted()]
2018-05-27 21:22:35 INFO  Main:279 - p.x[CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:22:35 INFO  Main:280 - p.y  walker.onCompleted()
2018-05-27 21:22:42 INFO  Main:279 - p.x[CtIfImpl, CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:22:42 INFO  Main:280 - p.y  walker
2018-05-27 21:22:43 INFO  Main:263 - Node:  final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker)
2018-05-27 21:22:43 INFO  Main:264 - [CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:22:43 DEBUG Main:268 - size 6
2018-05-27 21:22:43 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:22:43 INFO  Main:280 - p.y  [final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker)]
2018-05-27 21:22:43 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:22:43 INFO  Main:280 - p.y  [final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker), postOrderWalker.accept(tree, nodeWalker)]
2018-05-27 21:22:43 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:22:43 INFO  Main:280 - p.y  final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker)
2018-05-27 21:22:44 INFO  Main:279 - p.x[CtLocalVariableImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:22:44 INFO  Main:280 - p.y  new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker)
2018-05-27 21:22:46 INFO  Main:279 - p.x[CtLocalVariableImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl, CtConstructorCallImpl]
2018-05-27 21:22:46 INFO  Main:280 - p.y  [walker]
2018-05-27 21:22:48 INFO  Main:279 - p.x[CtLocalVariableImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl, CtConstructorCallImpl]
2018-05-27 21:22:48 INFO  Main:280 - p.y  walker
2018-05-27 21:22:49 INFO  Main:263 - Node:  walker.onEmpty()
2018-05-27 21:22:49 INFO  Main:264 - [CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:22:49 DEBUG Main:268 - size 4
2018-05-27 21:22:49 INFO  Main:279 - p.x[CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:22:49 INFO  Main:280 - p.y  [walker.onEmpty()]
2018-05-27 21:22:55 INFO  Main:279 - p.x[CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:22:55 INFO  Main:280 - p.y  [walker.onEmpty(), walker.onCompleted()]
2018-05-27 21:22:59 INFO  Main:279 - p.x[CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:22:59 INFO  Main:280 - p.y  walker.onEmpty()
2018-05-27 21:23:05 INFO  Main:279 - p.x[CtIfImpl, CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:23:05 INFO  Main:280 - p.y  walker
2018-05-27 21:23:05 INFO  Main:263 - Node:  {
    final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
    postOrderWalker.accept(tree, nodeWalker);
}
2018-05-27 21:23:05 INFO  Main:264 - [CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:23:05 DEBUG Main:268 - size 2
2018-05-27 21:23:05 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:23:05 INFO  Main:280 - p.y  {
    final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
    postOrderWalker.accept(tree, nodeWalker);
}
2018-05-27 21:23:05 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:23:05 INFO  Main:280 - p.y  [final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker), postOrderWalker.accept(tree, nodeWalker)]
2018-05-27 21:23:06 INFO  Main:263 - Node:  inOrderWalker.accept(tree, walker)
2018-05-27 21:23:06 INFO  Main:264 - [CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:23:06 DEBUG Main:268 - size 6
2018-05-27 21:23:06 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:23:06 INFO  Main:280 - p.y  [inOrderWalker.accept(tree, walker)]
2018-05-27 21:23:11 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:23:11 INFO  Main:280 - p.y  inOrderWalker.accept(tree, walker)
2018-05-27 21:23:31 INFO  Main:279 - p.x[CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:23:31 INFO  Main:280 - p.y  [tree, walker]
2018-05-27 21:23:31 INFO  Main:279 - p.x[CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:23:31 INFO  Main:280 - p.y  inOrderWalker
2018-05-27 21:23:32 INFO  Main:279 - p.x[CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:23:32 INFO  Main:280 - p.y  tree
2018-05-27 21:24:20 INFO  Main:279 - p.x[CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:24:20 INFO  Main:280 - p.y  walker
2018-05-27 21:24:23 INFO  Main:263 - Node:  done.printStackTrace()
2018-05-27 21:24:23 INFO  Main:264 - [CtTryImpl, CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtCatchImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:24:23 DEBUG Main:268 - size 3
2018-05-27 21:24:23 INFO  Main:279 - p.x[CtTryImpl, CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtCatchImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:24:23 INFO  Main:280 - p.y  [done.printStackTrace()]
2018-05-27 21:24:31 INFO  Main:279 - p.x[CtTryImpl, CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtCatchImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:24:31 INFO  Main:280 - p.y  done.printStackTrace()
2018-05-27 21:24:46 INFO  Main:279 - p.x[CtTryImpl, CtIfImpl, CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtCatchImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:24:46 INFO  Main:280 - p.y  done
2018-05-27 21:24:47 INFO  Main:263 - Node:  {
    inOrderWalker.accept(tree, walker);
}
2018-05-27 21:24:47 INFO  Main:264 - [CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:24:47 DEBUG Main:268 - size 2
2018-05-27 21:24:47 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:24:47 INFO  Main:280 - p.y  {
    inOrderWalker.accept(tree, walker);
}
2018-05-27 21:24:47 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:24:47 INFO  Main:280 - p.y  [inOrderWalker.accept(tree, walker)]
2018-05-27 21:24:52 INFO  Main:263 - Node:  {
    done.printStackTrace();
}
2018-05-27 21:24:52 INFO  Main:264 - [CtTryImpl, CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtCatchImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:24:52 DEBUG Main:268 - size 2
2018-05-27 21:24:52 INFO  Main:279 - p.x[CtTryImpl, CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtCatchImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:24:52 INFO  Main:280 - p.y  {
    done.printStackTrace();
}
2018-05-27 21:25:04 INFO  Main:279 - p.x[CtTryImpl, CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtCatchImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:25:04 INFO  Main:280 - p.y  [done.printStackTrace()]
2018-05-27 21:25:12 INFO  Main:263 - Node:  inOrderWalker.accept(tree, nodeWalker)
2018-05-27 21:25:12 INFO  Main:264 - [CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:25:12 DEBUG Main:268 - size 6
2018-05-27 21:25:12 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:25:12 INFO  Main:280 - p.y  [inOrderWalker.accept(tree, nodeWalker)]
2018-05-27 21:25:17 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:25:17 INFO  Main:280 - p.y  inOrderWalker.accept(tree, nodeWalker)
2018-05-27 21:25:49 INFO  Main:279 - p.x[CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:25:49 INFO  Main:280 - p.y  [tree, nodeWalker]
2018-05-27 21:25:49 INFO  Main:279 - p.x[CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:25:49 INFO  Main:280 - p.y  inOrderWalker
2018-05-27 21:25:50 INFO  Main:279 - p.x[CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:25:50 INFO  Main:280 - p.y  tree
2018-05-27 21:27:23 INFO  Main:279 - p.x[CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:27:23 INFO  Main:280 - p.y  nodeWalker
2018-05-27 21:27:25 INFO  Main:263 - Node:  {
}
2018-05-27 21:27:25 INFO  Main:264 - [CtPackageImpl, CtConstructorImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl]
2018-05-27 21:27:25 DEBUG Main:268 - size 2
2018-05-27 21:27:25 INFO  Main:279 - p.x[CtPackageImpl, CtConstructorImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl]
2018-05-27 21:27:25 INFO  Main:280 - p.y  {
}
2018-05-27 21:27:25 INFO  Main:279 - p.x[CtPackageImpl, CtConstructorImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl]
2018-05-27 21:27:25 INFO  Main:280 - p.y  [super()]
2018-05-27 21:27:25 INFO  Main:263 - Node:  walker.onCompleted()
2018-05-27 21:27:25 INFO  Main:264 - [CtTryImpl, CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:27:25 DEBUG Main:268 - size 3
2018-05-27 21:27:25 INFO  Main:279 - p.x[CtTryImpl, CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:27:25 INFO  Main:280 - p.y  [walker.onCompleted()]
2018-05-27 21:27:33 INFO  Main:279 - p.x[CtTryImpl, CtIfImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:27:33 INFO  Main:280 - p.y  walker.onCompleted()
2018-05-27 21:27:50 INFO  Main:279 - p.x[CtTryImpl, CtIfImpl, CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:27:50 INFO  Main:280 - p.y  walker
2018-05-27 21:27:51 INFO  Main:263 - Node:  final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker)
2018-05-27 21:27:51 INFO  Main:264 - [CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:27:51 DEBUG Main:268 - size 6
2018-05-27 21:27:51 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:27:51 INFO  Main:280 - p.y  [final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker)]
2018-05-27 21:27:51 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:27:51 INFO  Main:280 - p.y  [final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker), inOrderWalker.accept(tree, nodeWalker)]
2018-05-27 21:27:52 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:27:52 INFO  Main:280 - p.y  final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker)
2018-05-27 21:27:53 INFO  Main:279 - p.x[CtLocalVariableImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:27:53 INFO  Main:280 - p.y  new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker)
2018-05-27 21:27:56 INFO  Main:279 - p.x[CtLocalVariableImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl, CtConstructorCallImpl]
2018-05-27 21:27:56 INFO  Main:280 - p.y  [walker]
2018-05-27 21:27:57 INFO  Main:279 - p.x[CtLocalVariableImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl, CtConstructorCallImpl]
2018-05-27 21:27:57 INFO  Main:280 - p.y  walker
2018-05-27 21:27:58 INFO  Main:263 - Node:  accept(nextLevel, walker)
2018-05-27 21:27:58 INFO  Main:264 - [CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:27:58 DEBUG Main:268 - size 5
2018-05-27 21:27:58 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:27:58 INFO  Main:280 - p.y  [accept(nextLevel, walker)]
2018-05-27 21:28:06 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:28:06 INFO  Main:280 - p.y  accept(nextLevel, walker)
2018-05-27 21:28:25 INFO  Main:279 - p.x[CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:28:25 INFO  Main:280 - p.y  [nextLevel, walker]
2018-05-27 21:28:25 INFO  Main:279 - p.x[CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:28:25 INFO  Main:280 - p.y  nextLevel
2018-05-27 21:28:27 INFO  Main:279 - p.x[CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:28:27 INFO  Main:280 - p.y  walker
2018-05-27 21:28:29 INFO  Main:263 - Node:  {
    final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
    inOrderWalker.accept(tree, nodeWalker);
}
2018-05-27 21:28:29 INFO  Main:264 - [CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:28:29 DEBUG Main:268 - size 2
2018-05-27 21:28:29 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:28:29 INFO  Main:280 - p.y  {
    final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
    inOrderWalker.accept(tree, nodeWalker);
}
2018-05-27 21:28:29 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:28:29 INFO  Main:280 - p.y  [final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker), inOrderWalker.accept(tree, nodeWalker)]
2018-05-27 21:28:29 INFO  Main:263 - Node:  preOrderWalker.accept(tree, walker)
2018-05-27 21:28:29 INFO  Main:264 - [CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:28:29 DEBUG Main:268 - size 6
2018-05-27 21:28:29 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:28:29 INFO  Main:280 - p.y  [preOrderWalker.accept(tree, walker)]
2018-05-27 21:28:34 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:28:34 INFO  Main:280 - p.y  preOrderWalker.accept(tree, walker)
2018-05-27 21:28:52 INFO  Main:279 - p.x[CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:28:52 INFO  Main:280 - p.y  [tree, walker]
2018-05-27 21:28:52 INFO  Main:279 - p.x[CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:28:52 INFO  Main:280 - p.y  preOrderWalker
2018-05-27 21:28:54 INFO  Main:279 - p.x[CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:28:54 INFO  Main:280 - p.y  tree
2018-05-27 21:29:37 INFO  Main:279 - p.x[CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:29:37 INFO  Main:280 - p.y  walker
2018-05-27 21:29:39 INFO  Main:263 - Node:  {
    preOrderWalker.accept(tree, walker);
}
2018-05-27 21:29:39 INFO  Main:264 - [CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:29:39 DEBUG Main:268 - size 2
2018-05-27 21:29:39 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:29:39 INFO  Main:280 - p.y  {
    preOrderWalker.accept(tree, walker);
}
2018-05-27 21:29:39 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:29:39 INFO  Main:280 - p.y  [preOrderWalker.accept(tree, walker)]
2018-05-27 21:29:44 INFO  Main:263 - Node:  {
    final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
    preOrderWalker.accept(tree, nodeWalker);
}
2018-05-27 21:29:44 INFO  Main:264 - [CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:29:44 DEBUG Main:268 - size 2
2018-05-27 21:29:44 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:29:44 INFO  Main:280 - p.y  {
    final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
    preOrderWalker.accept(tree, nodeWalker);
}
2018-05-27 21:29:44 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:29:44 INFO  Main:280 - p.y  [final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker), preOrderWalker.accept(tree, nodeWalker)]
2018-05-27 21:29:44 INFO  Main:263 - Node:  final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker)
2018-05-27 21:29:44 INFO  Main:264 - [CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:29:44 DEBUG Main:268 - size 6
2018-05-27 21:29:44 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:29:44 INFO  Main:280 - p.y  [final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker)]
2018-05-27 21:29:45 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:29:45 INFO  Main:280 - p.y  [final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker), preOrderWalker.accept(tree, nodeWalker)]
2018-05-27 21:29:45 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:29:45 INFO  Main:280 - p.y  final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker)
2018-05-27 21:29:46 INFO  Main:279 - p.x[CtLocalVariableImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:29:46 INFO  Main:280 - p.y  new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker)
2018-05-27 21:29:47 INFO  Main:279 - p.x[CtLocalVariableImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl, CtConstructorCallImpl]
2018-05-27 21:29:47 INFO  Main:280 - p.y  [walker]
2018-05-27 21:29:48 INFO  Main:279 - p.x[CtLocalVariableImpl, CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl, CtConstructorCallImpl]
2018-05-27 21:29:48 INFO  Main:280 - p.y  walker
2018-05-27 21:29:50 INFO  Main:263 - Node:  preOrderWalker.accept(tree, nodeWalker)
2018-05-27 21:29:50 INFO  Main:264 - [CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:29:50 DEBUG Main:268 - size 6
2018-05-27 21:29:50 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:29:50 INFO  Main:280 - p.y  [preOrderWalker.accept(tree, nodeWalker)]
2018-05-27 21:29:54 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:29:54 INFO  Main:280 - p.y  preOrderWalker.accept(tree, nodeWalker)
2018-05-27 21:30:26 INFO  Main:279 - p.x[CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:30:26 INFO  Main:280 - p.y  [tree, nodeWalker]
2018-05-27 21:30:26 INFO  Main:279 - p.x[CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:30:26 INFO  Main:280 - p.y  preOrderWalker
2018-05-27 21:30:28 INFO  Main:279 - p.x[CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:30:28 INFO  Main:280 - p.y  tree
2018-05-27 21:32:01 INFO  Main:279 - p.x[CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-27 21:32:01 INFO  Main:280 - p.y  nodeWalker
2018-05-27 21:32:03 INFO  Main:263 - Node:  preOrderWalker = new com.mattunderscore.trees.common.walkers.PreOrderWalker()
2018-05-27 21:32:03 INFO  Main:264 - [CtPackageImpl, CtConstructorImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl]
2018-05-27 21:32:03 DEBUG Main:268 - size 4
2018-05-27 21:32:03 INFO  Main:279 - p.x[CtPackageImpl, CtConstructorImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl]
2018-05-27 21:32:03 INFO  Main:280 - p.y  [preOrderWalker = new com.mattunderscore.trees.common.walkers.PreOrderWalker()]
2018-05-27 21:32:03 INFO  Main:279 - p.x[CtPackageImpl, CtConstructorImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl]
2018-05-27 21:32:03 INFO  Main:280 - p.y  preOrderWalker = new com.mattunderscore.trees.common.walkers.PreOrderWalker()
2018-05-27 21:32:05 INFO  Main:279 - p.x[CtPackageImpl, CtConstructorImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtAssignmentImpl, CtBlockImpl]
2018-05-27 21:32:05 INFO  Main:280 - p.y  preOrderWalker
2018-05-27 21:32:05 INFO  Main:279 - p.x[CtPackageImpl, CtConstructorImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtAssignmentImpl, CtBlockImpl]
2018-05-27 21:32:05 INFO  Main:280 - p.y  new com.mattunderscore.trees.common.walkers.PreOrderWalker()
2018-05-27 21:32:06 INFO  Main:263 - Node:  postOrderWalker = new com.mattunderscore.trees.common.walkers.PostOrderWalker()
2018-05-27 21:32:06 INFO  Main:264 - [CtPackageImpl, CtConstructorImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl]
2018-05-27 21:32:06 DEBUG Main:268 - size 5
2018-05-27 21:32:06 INFO  Main:279 - p.x[CtPackageImpl, CtConstructorImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl]
2018-05-27 21:32:06 INFO  Main:280 - p.y  [postOrderWalker = new com.mattunderscore.trees.common.walkers.PostOrderWalker()]
2018-05-27 21:32:06 INFO  Main:279 - p.x[CtPackageImpl, CtConstructorImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl]
2018-05-27 21:32:06 INFO  Main:280 - p.y  [postOrderWalker = new com.mattunderscore.trees.common.walkers.PostOrderWalker(), preOrderWalker = new com.mattunderscore.trees.common.walkers.PreOrderWalker()]
2018-05-27 21:32:06 INFO  Main:279 - p.x[CtPackageImpl, CtConstructorImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl]
2018-05-27 21:32:06 INFO  Main:280 - p.y  postOrderWalker = new com.mattunderscore.trees.common.walkers.PostOrderWalker()
2018-05-27 21:32:07 INFO  Main:279 - p.x[CtPackageImpl, CtConstructorImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtAssignmentImpl, CtBlockImpl]
2018-05-27 21:32:07 INFO  Main:280 - p.y  postOrderWalker
2018-05-27 21:32:07 INFO  Main:279 - p.x[CtPackageImpl, CtConstructorImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtAssignmentImpl, CtBlockImpl]
2018-05-27 21:32:07 INFO  Main:280 - p.y  new com.mattunderscore.trees.common.walkers.PostOrderWalker()
2018-05-27 21:32:08 INFO  Main:263 - Node:  inOrderWalker = new com.mattunderscore.trees.common.walkers.InOrderWalker()
2018-05-27 21:32:08 INFO  Main:264 - [CtPackageImpl, CtConstructorImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl]
2018-05-27 21:32:08 DEBUG Main:268 - size 6
2018-05-27 21:32:08 INFO  Main:279 - p.x[CtPackageImpl, CtConstructorImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl]
2018-05-27 21:32:08 INFO  Main:280 - p.y  [inOrderWalker = new com.mattunderscore.trees.common.walkers.InOrderWalker()]
2018-05-27 21:32:08 INFO  Main:279 - p.x[CtPackageImpl, CtConstructorImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl]
2018-05-27 21:32:08 INFO  Main:280 - p.y  [inOrderWalker = new com.mattunderscore.trees.common.walkers.InOrderWalker(), postOrderWalker = new com.mattunderscore.trees.common.walkers.PostOrderWalker()]
2018-05-27 21:32:08 INFO  Main:279 - p.x[CtPackageImpl, CtConstructorImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl]
2018-05-27 21:32:08 INFO  Main:280 - p.y  [inOrderWalker = new com.mattunderscore.trees.common.walkers.InOrderWalker(), postOrderWalker = new com.mattunderscore.trees.common.walkers.PostOrderWalker(), preOrderWalker = new com.mattunderscore.trees.common.walkers.PreOrderWalker()]
2018-05-27 21:32:08 INFO  Main:279 - p.x[CtPackageImpl, CtConstructorImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl]
2018-05-27 21:32:08 INFO  Main:280 - p.y  inOrderWalker = new com.mattunderscore.trees.common.walkers.InOrderWalker()
2018-05-27 21:32:11 INFO  Main:279 - p.x[CtPackageImpl, CtConstructorImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtAssignmentImpl, CtBlockImpl]
2018-05-27 21:32:11 INFO  Main:280 - p.y  inOrderWalker
2018-05-27 21:32:11 INFO  Main:279 - p.x[CtPackageImpl, CtConstructorImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtAssignmentImpl, CtBlockImpl]
2018-05-27 21:32:11 INFO  Main:280 - p.y  new com.mattunderscore.trees.common.walkers.InOrderWalker()
2018-05-27 21:32:12 INFO  Main:263 - Node:  breadthFirstWalker = new com.mattunderscore.trees.common.walkers.BreadthFirstWalker()
2018-05-27 21:32:12 INFO  Main:264 - [CtPackageImpl, CtConstructorImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl]
2018-05-27 21:32:12 DEBUG Main:268 - size 7
2018-05-27 21:32:12 INFO  Main:279 - p.x[CtPackageImpl, CtConstructorImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl]
2018-05-27 21:32:12 INFO  Main:280 - p.y  [breadthFirstWalker = new com.mattunderscore.trees.common.walkers.BreadthFirstWalker()]
2018-05-27 21:32:13 INFO  Main:279 - p.x[CtPackageImpl, CtConstructorImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl]
2018-05-27 21:32:13 INFO  Main:280 - p.y  [breadthFirstWalker = new com.mattunderscore.trees.common.walkers.BreadthFirstWalker(), inOrderWalker = new com.mattunderscore.trees.common.walkers.InOrderWalker()]
2018-05-27 21:32:13 INFO  Main:279 - p.x[CtPackageImpl, CtConstructorImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl]
2018-05-27 21:32:13 INFO  Main:280 - p.y  [breadthFirstWalker = new com.mattunderscore.trees.common.walkers.BreadthFirstWalker(), inOrderWalker = new com.mattunderscore.trees.common.walkers.InOrderWalker(), postOrderWalker = new com.mattunderscore.trees.common.walkers.PostOrderWalker()]
2018-05-27 21:32:13 INFO  Main:279 - p.x[CtPackageImpl, CtConstructorImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl]
2018-05-27 21:32:13 INFO  Main:280 - p.y  [breadthFirstWalker = new com.mattunderscore.trees.common.walkers.BreadthFirstWalker(), inOrderWalker = new com.mattunderscore.trees.common.walkers.InOrderWalker(), postOrderWalker = new com.mattunderscore.trees.common.walkers.PostOrderWalker(), preOrderWalker = new com.mattunderscore.trees.common.walkers.PreOrderWalker()]
2018-05-27 21:32:13 INFO  Main:279 - p.x[CtPackageImpl, CtConstructorImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl]
2018-05-27 21:32:13 INFO  Main:280 - p.y  breadthFirstWalker = new com.mattunderscore.trees.common.walkers.BreadthFirstWalker()
2018-05-27 21:32:13 INFO  Main:279 - p.x[CtPackageImpl, CtConstructorImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtAssignmentImpl, CtBlockImpl]
2018-05-27 21:32:13 INFO  Main:280 - p.y  breadthFirstWalker
2018-05-27 21:32:13 INFO  Main:279 - p.x[CtPackageImpl, CtConstructorImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtAssignmentImpl, CtBlockImpl]
2018-05-27 21:32:13 INFO  Main:280 - p.y  new com.mattunderscore.trees.common.walkers.BreadthFirstWalker()
2018-05-27 21:32:14 INFO  Main:263 - Node:  {
    breadthFirstWalker = new com.mattunderscore.trees.common.walkers.BreadthFirstWalker();
    inOrderWalker = new com.mattunderscore.trees.common.walkers.InOrderWalker();
    postOrderWalker = new com.mattunderscore.trees.common.walkers.PostOrderWalker();
    preOrderWalker = new com.mattunderscore.trees.common.walkers.PreOrderWalker();
}
2018-05-27 21:32:14 INFO  Main:264 - [CtPackageImpl, CtConstructorImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl]
2018-05-27 21:32:14 DEBUG Main:268 - size 2
2018-05-27 21:32:14 INFO  Main:279 - p.x[CtPackageImpl, CtConstructorImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl]
2018-05-27 21:32:14 INFO  Main:280 - p.y  {
    breadthFirstWalker = new com.mattunderscore.trees.common.walkers.BreadthFirstWalker();
    inOrderWalker = new com.mattunderscore.trees.common.walkers.InOrderWalker();
    postOrderWalker = new com.mattunderscore.trees.common.walkers.PostOrderWalker();
    preOrderWalker = new com.mattunderscore.trees.common.walkers.PreOrderWalker();
}
2018-05-27 21:32:14 INFO  Main:279 - p.x[CtPackageImpl, CtConstructorImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl]
2018-05-27 21:32:14 INFO  Main:280 - p.y  [super(), breadthFirstWalker = new com.mattunderscore.trees.common.walkers.BreadthFirstWalker(), inOrderWalker = new com.mattunderscore.trees.common.walkers.InOrderWalker(), postOrderWalker = new com.mattunderscore.trees.common.walkers.PostOrderWalker(), preOrderWalker = new com.mattunderscore.trees.common.walkers.PreOrderWalker()]
2018-05-27 21:32:14 INFO  Main:263 - Node:  @net.jcip.annotations.Immutable
public final class TreeWalkerFactoryImpl implements com.mattunderscore.trees.traversal.TreeWalkerFactory {
    private final com.mattunderscore.trees.common.walkers.BreadthFirstWalker breadthFirstWalker;

    private final com.mattunderscore.trees.common.walkers.InOrderWalker inOrderWalker;

    private final com.mattunderscore.trees.common.walkers.PostOrderWalker postOrderWalker;

    private final com.mattunderscore.trees.common.walkers.PreOrderWalker preOrderWalker;

    public TreeWalkerFactoryImpl() {
        breadthFirstWalker = new com.mattunderscore.trees.common.walkers.BreadthFirstWalker();
        inOrderWalker = new com.mattunderscore.trees.common.walkers.InOrderWalker();
        postOrderWalker = new com.mattunderscore.trees.common.walkers.PostOrderWalker();
        preOrderWalker = new com.mattunderscore.trees.common.walkers.PreOrderWalker();
    }

    @java.lang.Override
    public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkPreOrder(T tree, com.mattunderscore.trees.traversal.Walker<N> walker) {
        preOrderWalker.accept(tree, walker);
    }

    @java.lang.Override
    public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkInOrder(T tree, com.mattunderscore.trees.traversal.Walker<N> walker) {
        inOrderWalker.accept(tree, walker);
    }

    @java.lang.Override
    public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkPostOrder(T tree, com.mattunderscore.trees.traversal.Walker<N> walker) {
        postOrderWalker.accept(tree, walker);
    }

    @java.lang.Override
    public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkBreadthFirst(T tree, com.mattunderscore.trees.traversal.Walker<N> walker) {
        breadthFirstWalker.accept(tree, walker);
    }

    @java.lang.Override
    public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkElementsPreOrder(T tree, com.mattunderscore.trees.traversal.Walker<E> walker) {
        final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
        preOrderWalker.accept(tree, nodeWalker);
    }

    @java.lang.Override
    public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkElementsInOrder(T tree, com.mattunderscore.trees.traversal.Walker<E> walker) {
        final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
        inOrderWalker.accept(tree, nodeWalker);
    }

    @java.lang.Override
    public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkElementsPostOrder(T tree, com.mattunderscore.trees.traversal.Walker<E> walker) {
        final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
        postOrderWalker.accept(tree, nodeWalker);
    }

    @java.lang.Override
    public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkElementsBreadthFirst(T tree, com.mattunderscore.trees.traversal.Walker<E> walker) {
        final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
        breadthFirstWalker.accept(tree, nodeWalker);
    }
}
2018-05-27 21:32:14 INFO  Main:264 - [CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage]
2018-05-27 21:32:14 DEBUG Main:268 - size 50
2018-05-27 21:32:14 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage]
2018-05-27 21:32:14 INFO  Main:280 - p.y  @net.jcip.annotations.Immutable
public final class TreeWalkerFactoryImpl implements com.mattunderscore.trees.traversal.TreeWalkerFactory {
    private final com.mattunderscore.trees.common.walkers.BreadthFirstWalker breadthFirstWalker;

    private final com.mattunderscore.trees.common.walkers.InOrderWalker inOrderWalker;

    private final com.mattunderscore.trees.common.walkers.PostOrderWalker postOrderWalker;

    private final com.mattunderscore.trees.common.walkers.PreOrderWalker preOrderWalker;

    public TreeWalkerFactoryImpl() {
        breadthFirstWalker = new com.mattunderscore.trees.common.walkers.BreadthFirstWalker();
        inOrderWalker = new com.mattunderscore.trees.common.walkers.InOrderWalker();
        postOrderWalker = new com.mattunderscore.trees.common.walkers.PostOrderWalker();
        preOrderWalker = new com.mattunderscore.trees.common.walkers.PreOrderWalker();
    }

    @java.lang.Override
    public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkPreOrder(T tree, com.mattunderscore.trees.traversal.Walker<N> walker) {
        preOrderWalker.accept(tree, walker);
    }

    @java.lang.Override
    public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkInOrder(T tree, com.mattunderscore.trees.traversal.Walker<N> walker) {
        inOrderWalker.accept(tree, walker);
    }

    @java.lang.Override
    public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkPostOrder(T tree, com.mattunderscore.trees.traversal.Walker<N> walker) {
        postOrderWalker.accept(tree, walker);
    }

    @java.lang.Override
    public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkBreadthFirst(T tree, com.mattunderscore.trees.traversal.Walker<N> walker) {
        breadthFirstWalker.accept(tree, walker);
    }

    @java.lang.Override
    public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkElementsPreOrder(T tree, com.mattunderscore.trees.traversal.Walker<E> walker) {
        final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
        preOrderWalker.accept(tree, nodeWalker);
    }

    @java.lang.Override
    public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkElementsInOrder(T tree, com.mattunderscore.trees.traversal.Walker<E> walker) {
        final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
        inOrderWalker.accept(tree, nodeWalker);
    }

    @java.lang.Override
    public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkElementsPostOrder(T tree, com.mattunderscore.trees.traversal.Walker<E> walker) {
        final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
        postOrderWalker.accept(tree, nodeWalker);
    }

    @java.lang.Override
    public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkElementsBreadthFirst(T tree, com.mattunderscore.trees.traversal.Walker<E> walker) {
        final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
        breadthFirstWalker.accept(tree, nodeWalker);
    }
}
2018-05-27 21:32:14 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl]
2018-05-27 21:32:14 INFO  Main:280 - p.y  [public TreeWalkerFactoryImpl() {
    breadthFirstWalker = new com.mattunderscore.trees.common.walkers.BreadthFirstWalker();
    inOrderWalker = new com.mattunderscore.trees.common.walkers.InOrderWalker();
    postOrderWalker = new com.mattunderscore.trees.common.walkers.PostOrderWalker();
    preOrderWalker = new com.mattunderscore.trees.common.walkers.PreOrderWalker();
}]
2018-05-27 21:32:14 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl]
2018-05-27 21:32:14 INFO  Main:280 - p.y  [com.mattunderscore.trees.traversal.TreeWalkerFactory]
2018-05-27 21:32:14 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl]
2018-05-27 21:32:14 INFO  Main:280 - p.y  [@java.lang.Override
public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkBreadthFirst(T tree, com.mattunderscore.trees.traversal.Walker<N> walker) {
    breadthFirstWalker.accept(tree, walker);
}, @java.lang.Override
public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkElementsBreadthFirst(T tree, com.mattunderscore.trees.traversal.Walker<E> walker) {
    final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
    breadthFirstWalker.accept(tree, nodeWalker);
}, @java.lang.Override
public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkElementsInOrder(T tree, com.mattunderscore.trees.traversal.Walker<E> walker) {
    final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
    inOrderWalker.accept(tree, nodeWalker);
}, @java.lang.Override
public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkElementsPostOrder(T tree, com.mattunderscore.trees.traversal.Walker<E> walker) {
    final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
    postOrderWalker.accept(tree, nodeWalker);
}, @java.lang.Override
public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkElementsPreOrder(T tree, com.mattunderscore.trees.traversal.Walker<E> walker) {
    final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
    preOrderWalker.accept(tree, nodeWalker);
}, @java.lang.Override
public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkInOrder(T tree, com.mattunderscore.trees.traversal.Walker<N> walker) {
    inOrderWalker.accept(tree, walker);
}, @java.lang.Override
public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkPostOrder(T tree, com.mattunderscore.trees.traversal.Walker<N> walker) {
    postOrderWalker.accept(tree, walker);
}, @java.lang.Override
public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkPreOrder(T tree, com.mattunderscore.trees.traversal.Walker<N> walker) {
    preOrderWalker.accept(tree, walker);
}]
2018-05-27 21:32:14 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl]
2018-05-27 21:32:14 INFO  Main:280 - p.y  [private final com.mattunderscore.trees.common.walkers.BreadthFirstWalker breadthFirstWalker;, private final com.mattunderscore.trees.common.walkers.InOrderWalker inOrderWalker;, private final com.mattunderscore.trees.common.walkers.PostOrderWalker postOrderWalker;, private final com.mattunderscore.trees.common.walkers.PreOrderWalker preOrderWalker;]
2018-05-27 21:32:14 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl]
2018-05-27 21:32:14 INFO  Main:280 - p.y  private final com.mattunderscore.trees.common.walkers.BreadthFirstWalker breadthFirstWalker;
2018-05-27 21:32:14 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl]
2018-05-27 21:32:14 INFO  Main:280 - p.y  private final com.mattunderscore.trees.common.walkers.InOrderWalker inOrderWalker;
2018-05-27 21:32:14 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl]
2018-05-27 21:32:14 INFO  Main:280 - p.y  private final com.mattunderscore.trees.common.walkers.PostOrderWalker postOrderWalker;
2018-05-27 21:32:14 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl]
2018-05-27 21:32:14 INFO  Main:280 - p.y  private final com.mattunderscore.trees.common.walkers.PreOrderWalker preOrderWalker;
2018-05-27 21:32:14 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl]
2018-05-27 21:32:14 INFO  Main:280 - p.y  public TreeWalkerFactoryImpl() {
    breadthFirstWalker = new com.mattunderscore.trees.common.walkers.BreadthFirstWalker();
    inOrderWalker = new com.mattunderscore.trees.common.walkers.InOrderWalker();
    postOrderWalker = new com.mattunderscore.trees.common.walkers.PostOrderWalker();
    preOrderWalker = new com.mattunderscore.trees.common.walkers.PreOrderWalker();
}
2018-05-27 21:32:14 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl]
2018-05-27 21:32:14 INFO  Main:280 - p.y  @java.lang.Override
public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkBreadthFirst(T tree, com.mattunderscore.trees.traversal.Walker<N> walker) {
    breadthFirstWalker.accept(tree, walker);
}
2018-05-27 21:32:14 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:32:14 INFO  Main:280 - p.y  [E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>]
2018-05-27 21:32:14 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:32:14 INFO  Main:280 - p.y  [T tree, com.mattunderscore.trees.traversal.Walker<N> walker]
2018-05-27 21:32:14 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:32:14 INFO  Main:280 - p.y  T tree
2018-05-27 21:32:14 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:32:14 INFO  Main:280 - p.y  com.mattunderscore.trees.traversal.Walker<N> walker
2018-05-27 21:32:14 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl]
2018-05-27 21:32:14 INFO  Main:280 - p.y  @java.lang.Override
public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkElementsBreadthFirst(T tree, com.mattunderscore.trees.traversal.Walker<E> walker) {
    final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
    breadthFirstWalker.accept(tree, nodeWalker);
}
2018-05-27 21:32:14 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:32:14 INFO  Main:280 - p.y  [E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>]
2018-05-27 21:32:14 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:32:14 INFO  Main:280 - p.y  [T tree, com.mattunderscore.trees.traversal.Walker<E> walker]
2018-05-27 21:32:14 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:32:14 INFO  Main:280 - p.y  T tree
2018-05-27 21:32:14 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:32:14 INFO  Main:280 - p.y  com.mattunderscore.trees.traversal.Walker<E> walker
2018-05-27 21:32:14 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl]
2018-05-27 21:32:14 INFO  Main:280 - p.y  @java.lang.Override
public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkElementsInOrder(T tree, com.mattunderscore.trees.traversal.Walker<E> walker) {
    final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
    inOrderWalker.accept(tree, nodeWalker);
}
2018-05-27 21:32:14 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:32:14 INFO  Main:280 - p.y  [E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>]
2018-05-27 21:32:14 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:32:14 INFO  Main:280 - p.y  [T tree, com.mattunderscore.trees.traversal.Walker<E> walker]
2018-05-27 21:32:14 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:32:14 INFO  Main:280 - p.y  T tree
2018-05-27 21:32:14 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:32:14 INFO  Main:280 - p.y  com.mattunderscore.trees.traversal.Walker<E> walker
2018-05-27 21:32:14 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl]
2018-05-27 21:32:14 INFO  Main:280 - p.y  @java.lang.Override
public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkElementsPostOrder(T tree, com.mattunderscore.trees.traversal.Walker<E> walker) {
    final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
    postOrderWalker.accept(tree, nodeWalker);
}
2018-05-27 21:32:14 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:32:14 INFO  Main:280 - p.y  [E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>]
2018-05-27 21:32:14 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:32:14 INFO  Main:280 - p.y  [T tree, com.mattunderscore.trees.traversal.Walker<E> walker]
2018-05-27 21:32:14 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:32:14 INFO  Main:280 - p.y  T tree
2018-05-27 21:32:14 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:32:14 INFO  Main:280 - p.y  com.mattunderscore.trees.traversal.Walker<E> walker
2018-05-27 21:32:14 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl]
2018-05-27 21:32:14 INFO  Main:280 - p.y  @java.lang.Override
public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkElementsPreOrder(T tree, com.mattunderscore.trees.traversal.Walker<E> walker) {
    final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
    preOrderWalker.accept(tree, nodeWalker);
}
2018-05-27 21:32:14 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:32:14 INFO  Main:280 - p.y  [E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>]
2018-05-27 21:32:14 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:32:14 INFO  Main:280 - p.y  [T tree, com.mattunderscore.trees.traversal.Walker<E> walker]
2018-05-27 21:32:14 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:32:14 INFO  Main:280 - p.y  T tree
2018-05-27 21:32:14 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:32:14 INFO  Main:280 - p.y  com.mattunderscore.trees.traversal.Walker<E> walker
2018-05-27 21:32:14 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl]
2018-05-27 21:32:14 INFO  Main:280 - p.y  @java.lang.Override
public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkInOrder(T tree, com.mattunderscore.trees.traversal.Walker<N> walker) {
    inOrderWalker.accept(tree, walker);
}
2018-05-27 21:32:14 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:32:14 INFO  Main:280 - p.y  [E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>]
2018-05-27 21:32:14 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:32:14 INFO  Main:280 - p.y  [T tree, com.mattunderscore.trees.traversal.Walker<N> walker]
2018-05-27 21:32:14 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:32:14 INFO  Main:280 - p.y  T tree
2018-05-27 21:32:14 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:32:14 INFO  Main:280 - p.y  com.mattunderscore.trees.traversal.Walker<N> walker
2018-05-27 21:32:14 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl]
2018-05-27 21:32:14 INFO  Main:280 - p.y  @java.lang.Override
public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkPostOrder(T tree, com.mattunderscore.trees.traversal.Walker<N> walker) {
    postOrderWalker.accept(tree, walker);
}
2018-05-27 21:32:14 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:32:14 INFO  Main:280 - p.y  [E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>]
2018-05-27 21:32:14 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:32:14 INFO  Main:280 - p.y  [T tree, com.mattunderscore.trees.traversal.Walker<N> walker]
2018-05-27 21:32:14 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:32:14 INFO  Main:280 - p.y  T tree
2018-05-27 21:32:14 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:32:14 INFO  Main:280 - p.y  com.mattunderscore.trees.traversal.Walker<N> walker
2018-05-27 21:32:14 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl]
2018-05-27 21:32:14 INFO  Main:280 - p.y  @java.lang.Override
public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void walkPreOrder(T tree, com.mattunderscore.trees.traversal.Walker<N> walker) {
    preOrderWalker.accept(tree, walker);
}
2018-05-27 21:32:14 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:32:14 INFO  Main:280 - p.y  [E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>]
2018-05-27 21:32:14 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:32:14 INFO  Main:280 - p.y  [T tree, com.mattunderscore.trees.traversal.Walker<N> walker]
2018-05-27 21:32:14 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:32:14 INFO  Main:280 - p.y  T tree
2018-05-27 21:32:14 INFO  Main:279 - p.x[CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-27 21:32:14 INFO  Main:280 - p.y  com.mattunderscore.trees.traversal.Walker<N> walker
2018-05-28 13:02:11 INFO  ASTNodeFetcher:128 - xu  node @net.jcip.annotations.Immutable
public final class BreadthFirstWalker {
    public BreadthFirstWalker() {
    }

    public <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void accept(T tree, com.mattunderscore.trees.traversal.Walker<N> walker) {
        if (tree.isEmpty()) {
            walker.onEmpty();
            walker.onCompleted();
        } else {
            final N node = tree.getRoot();
            final java.util.List<N> rootLevel = new java.util.ArrayList<>(1);
            rootLevel.add(node);
            try {
                accept(rootLevel, walker);
                walker.onCompleted();
            } catch (com.mattunderscore.trees.common.walkers.Done done) {
                done.printStackTrace();
            }
        }
    }

    private <E, N extends com.mattunderscore.trees.tree.Node<E>, T extends com.mattunderscore.trees.tree.Tree<E, N>>void accept(java.util.List<N> currentLevel, com.mattunderscore.trees.traversal.Walker<N> walker) throws com.mattunderscore.trees.common.walkers.Done {
        final java.util.List<N> nextLevel = new java.util.ArrayList<>(((currentLevel.size()) * 2));
        for (final N node : currentLevel) {
            if (!(walker.onNext(node))) {
                throw new com.mattunderscore.trees.common.walkers.Done();
            } 
            nextLevel.addAll(((java.util.Collection<N>)(node.getChildren())));
        }
        accept(nextLevel, walker);
    }
}
2018-05-28 13:02:11 INFO  ASTNodeFetcher:130 - xu h [CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage]
2018-05-28 13:02:11 INFO  ASTNodeFetcher:131 - 41
2018-05-28 15:36:38 INFO  ASTNodeFetcher:129 - xu  node accept(nextLevel, walker)
2018-05-28 15:36:39 INFO  ASTNodeFetcher:131 - xu h [CtClassImpl, CtPackageImpl, CtBlockImpl, CtMethodImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage]
2018-05-28 15:36:39 INFO  ASTNodeFetcher:132 - 73
2018-05-28 16:35:19 INFO  ASTNodeFetcher:129 - xu  node accept(nextLevel, walker)
2018-05-28 16:35:19 INFO  ASTNodeFetcher:131 - xu h [CtClassImpl, CtPackageImpl, CtBlockImpl, CtMethodImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage]
2018-05-28 16:35:19 INFO  ASTNodeFetcher:132 - 73
2018-05-28 16:35:20 INFO  ASTNodeFetcher:129 - xu  node {
    final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
    preOrderWalker.accept(tree, nodeWalker);
}
2018-05-28 16:35:20 INFO  ASTNodeFetcher:131 - xu h [CtClassImpl, CtPackageImpl, CtMethodImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage]
2018-05-28 16:35:20 INFO  ASTNodeFetcher:132 - 73
2018-05-28 16:35:21 DEBUG Main:223 - suspicious
2018-05-28 16:35:21 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 55 -1 0.9833333333333334
2018-05-28 16:35:21 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 68 -1 0.95
2018-05-28 16:35:21 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 67 -1 0.9333333333333333
2018-05-28 16:35:21 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 51 -1 0.9166666666666667
2018-05-28 16:35:21 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 65 -1 0.9
2018-05-28 16:35:21 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 47 -1 0.85
2018-05-28 16:35:21 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 46 -1 0.8333333333333334
2018-05-28 16:35:21 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 41 -1 0.75
2018-05-28 16:35:21 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 56 -1 0.5
2018-05-28 16:35:21 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 71 -1 0.5
2018-05-28 16:35:21 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 69 -1 0.5
2018-05-28 16:35:21 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 93 -1 0.5
2018-05-28 16:35:21 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 68 -1 0.48333333333333334
2018-05-28 16:35:21 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 92 -1 0.48333333333333334
2018-05-28 16:35:21 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 54 -1 0.4666666666666667
2018-05-28 16:35:21 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 69 -1 0.4666666666666667
2018-05-28 16:35:21 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 91 -1 0.4666666666666667
2018-05-28 16:35:21 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 53 -1 0.45
2018-05-28 16:35:21 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 52 -1 0.43333333333333335
2018-05-28 16:35:21 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 66 -1 0.4166666666666667
2018-05-28 16:35:21 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 64 -1 0.4166666666666667
2018-05-28 16:35:21 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 63 -1 0.4
2018-05-28 16:35:21 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 87 -1 0.4
2018-05-28 16:35:21 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 49 -1 0.3833333333333333
2018-05-28 16:35:21 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 86 -1 0.3833333333333333
2018-05-28 16:35:21 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 48 -1 0.3666666666666667
2018-05-28 16:35:21 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 85 -1 0.3666666666666667
2018-05-28 16:35:21 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 59 -1 0.33333333333333337
2018-05-28 16:35:21 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 60 -1 0.31666666666666665
2018-05-28 16:35:21 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 58 -1 0.31666666666666665
2018-05-28 16:35:21 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 59 -1 0.3
2018-05-28 16:35:21 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 81 -1 0.3
2018-05-28 16:35:21 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 43 -1 0.2833333333333333
2018-05-28 16:35:21 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 57 -1 0.2833333333333333
2018-05-28 16:35:21 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 80 -1 0.2833333333333333
2018-05-28 16:35:21 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 73 -1 0.26666666666666666
2018-05-28 16:35:21 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 79 -1 0.26666666666666666
2018-05-28 16:35:21 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 54 -1 0.25
2018-05-28 16:35:21 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 53 -1 0.23333333333333334
2018-05-28 16:35:21 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 73 -1 0.23333333333333334
2018-05-28 16:35:21 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 74 -1 0.21666666666666667
2018-05-28 16:35:21 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 75 -1 0.2
2018-05-28 16:35:21 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 49 -1 0.16666666666666669
2018-05-28 16:35:21 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 48 -1 0.15000000000000002
2018-05-28 16:35:21 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 47 -1 0.13333333333333336
2018-05-28 16:35:21 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 46 -1 0.11666666666666664
2018-05-28 16:35:21 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 45 -1 0.09999999999999998
2018-05-28 16:35:21 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 39 -1 0.0
2018-05-28 16:35:21 DEBUG Main:227 - ------------------------------
2018-05-28 19:56:16 INFO  ASTNodeFetcher:129 - xu  node accept(nextLevel, walker)
2018-05-28 19:56:16 INFO  ASTNodeFetcher:131 - xu h [CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-28 19:56:16 INFO  ASTNodeFetcher:132 - 73
2018-05-28 19:56:17 INFO  ASTNodeFetcher:129 - xu  node {
    final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
    preOrderWalker.accept(tree, nodeWalker);
}
2018-05-28 19:56:17 INFO  ASTNodeFetcher:131 - xu h [CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtMethodImpl]
2018-05-28 19:56:17 INFO  ASTNodeFetcher:132 - 73
2018-05-28 19:56:18 DEBUG Main:223 - suspicious
2018-05-28 19:56:18 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 55 -1 0.9833333333333334
2018-05-28 19:56:18 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 68 -1 0.95
2018-05-28 19:56:18 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 67 -1 0.9333333333333333
2018-05-28 19:56:18 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 51 -1 0.9166666666666667
2018-05-28 19:56:18 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 65 -1 0.9
2018-05-28 19:56:18 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 47 -1 0.85
2018-05-28 19:56:18 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 46 -1 0.8333333333333334
2018-05-28 19:56:18 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 41 -1 0.75
2018-05-28 19:56:18 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 56 -1 0.5
2018-05-28 19:56:18 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 71 -1 0.5
2018-05-28 19:56:18 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 69 -1 0.5
2018-05-28 19:56:18 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 93 -1 0.5
2018-05-28 19:56:18 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 68 -1 0.48333333333333334
2018-05-28 19:56:18 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 92 -1 0.48333333333333334
2018-05-28 19:56:18 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 54 -1 0.4666666666666667
2018-05-28 19:56:18 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 69 -1 0.4666666666666667
2018-05-28 19:56:18 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 91 -1 0.4666666666666667
2018-05-28 19:56:18 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 53 -1 0.45
2018-05-28 19:56:18 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 52 -1 0.43333333333333335
2018-05-28 19:56:18 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 66 -1 0.4166666666666667
2018-05-28 19:56:18 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 64 -1 0.4166666666666667
2018-05-28 19:56:18 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 63 -1 0.4
2018-05-28 19:56:18 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 87 -1 0.4
2018-05-28 19:56:18 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 49 -1 0.3833333333333333
2018-05-28 19:56:18 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 86 -1 0.3833333333333333
2018-05-28 19:56:18 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 48 -1 0.3666666666666667
2018-05-28 19:56:18 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 85 -1 0.3666666666666667
2018-05-28 19:56:18 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 59 -1 0.33333333333333337
2018-05-28 19:56:18 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 60 -1 0.31666666666666665
2018-05-28 19:56:18 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 58 -1 0.31666666666666665
2018-05-28 19:56:18 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 59 -1 0.3
2018-05-28 19:56:18 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 81 -1 0.3
2018-05-28 19:56:18 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 43 -1 0.2833333333333333
2018-05-28 19:56:18 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 57 -1 0.2833333333333333
2018-05-28 19:56:18 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 80 -1 0.2833333333333333
2018-05-28 19:56:18 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 73 -1 0.26666666666666666
2018-05-28 19:56:18 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 79 -1 0.26666666666666666
2018-05-28 19:56:18 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 54 -1 0.25
2018-05-28 19:56:18 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 53 -1 0.23333333333333334
2018-05-28 19:56:18 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 73 -1 0.23333333333333334
2018-05-28 19:56:18 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 74 -1 0.21666666666666667
2018-05-28 19:56:18 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 75 -1 0.2
2018-05-28 19:56:18 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 49 -1 0.16666666666666669
2018-05-28 19:56:18 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 48 -1 0.15000000000000002
2018-05-28 19:56:18 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 47 -1 0.13333333333333336
2018-05-28 19:56:18 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 46 -1 0.11666666666666664
2018-05-28 19:56:18 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 45 -1 0.09999999999999998
2018-05-28 19:56:18 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 39 -1 0.0
2018-05-28 19:56:18 DEBUG Main:227 - ------------------------------
2018-05-28 20:35:34 INFO  ASTNodeFetcher:129 - xu  node accept(nextLevel, walker)
2018-05-28 20:35:34 INFO  ASTNodeFetcher:131 - xu h [CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-28 20:35:34 INFO  ASTNodeFetcher:132 - 73
2018-05-28 20:35:34 INFO  Main:269 - Node:  accept(nextLevel, walker)
2018-05-28 20:35:34 INFO  Main:270 - [CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-28 20:35:34 DEBUG Main:271 - size 5
2018-05-28 20:35:34 INFO  Main:273 - p.x [CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-28 20:35:34 INFO  Main:274 - p.y [accept(nextLevel, walker)]
2018-05-28 20:35:34 INFO  Main:273 - p.x [CtPackageImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-28 20:35:34 INFO  Main:274 - p.y accept(nextLevel, walker)
2018-05-28 20:35:34 INFO  Main:273 - p.x [CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-28 20:35:34 INFO  Main:274 - p.y [nextLevel, walker]
2018-05-28 20:35:34 INFO  Main:273 - p.x [CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-28 20:35:34 INFO  Main:274 - p.y nextLevel
2018-05-28 20:35:34 INFO  Main:273 - p.x [CtPackageImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage, CtClassImpl, CtBlockImpl, CtMethodImpl]
2018-05-28 20:35:34 INFO  Main:274 - p.y walker
2018-05-28 22:17:44 INFO  ASTNodeFetcher:129 - xu  node accept(nextLevel, walker)
2018-05-28 22:17:44 INFO  ASTNodeFetcher:131 - xu h [CtClassImpl, CtPackageImpl, CtBlockImpl, CtMethodImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage]
2018-05-28 22:17:44 INFO  ASTNodeFetcher:132 - 73
2018-05-28 22:17:45 INFO  ASTNodeFetcher:129 - xu  node {
    final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
    preOrderWalker.accept(tree, nodeWalker);
}
2018-05-28 22:17:45 INFO  ASTNodeFetcher:131 - xu h [CtClassImpl, CtPackageImpl, CtMethodImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage]
2018-05-28 22:17:45 INFO  ASTNodeFetcher:132 - 73
2018-05-28 22:17:46 DEBUG Main:223 - suspicious
2018-05-28 22:17:46 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 55 -1 0.9833333333333334
2018-05-28 22:17:46 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 68 -1 0.95
2018-05-28 22:17:46 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 67 -1 0.9333333333333333
2018-05-28 22:17:46 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 51 -1 0.9166666666666667
2018-05-28 22:17:46 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 65 -1 0.9
2018-05-28 22:17:46 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 47 -1 0.85
2018-05-28 22:17:46 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 46 -1 0.8333333333333334
2018-05-28 22:17:46 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 41 -1 0.75
2018-05-28 22:17:46 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 56 -1 0.5
2018-05-28 22:17:46 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 71 -1 0.5
2018-05-28 22:17:46 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 69 -1 0.5
2018-05-28 22:17:46 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 93 -1 0.5
2018-05-28 22:17:46 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 68 -1 0.48333333333333334
2018-05-28 22:17:46 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 92 -1 0.48333333333333334
2018-05-28 22:17:46 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 54 -1 0.4666666666666667
2018-05-28 22:17:46 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 69 -1 0.4666666666666667
2018-05-28 22:17:46 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 91 -1 0.4666666666666667
2018-05-28 22:17:46 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 53 -1 0.45
2018-05-28 22:17:46 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 52 -1 0.43333333333333335
2018-05-28 22:17:46 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 66 -1 0.4166666666666667
2018-05-28 22:17:46 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 64 -1 0.4166666666666667
2018-05-28 22:17:46 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 63 -1 0.4
2018-05-28 22:17:46 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 87 -1 0.4
2018-05-28 22:17:46 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 49 -1 0.3833333333333333
2018-05-28 22:17:46 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 86 -1 0.3833333333333333
2018-05-28 22:17:46 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 48 -1 0.3666666666666667
2018-05-28 22:17:46 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 85 -1 0.3666666666666667
2018-05-28 22:17:46 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 59 -1 0.33333333333333337
2018-05-28 22:17:46 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 60 -1 0.31666666666666665
2018-05-28 22:17:46 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 58 -1 0.31666666666666665
2018-05-28 22:17:46 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 59 -1 0.3
2018-05-28 22:17:46 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 81 -1 0.3
2018-05-28 22:17:46 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 43 -1 0.2833333333333333
2018-05-28 22:17:46 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 57 -1 0.2833333333333333
2018-05-28 22:17:46 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 80 -1 0.2833333333333333
2018-05-28 22:17:46 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/walkers/BreadthFirstWalker.java 73 -1 0.26666666666666666
2018-05-28 22:17:46 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 79 -1 0.26666666666666666
2018-05-28 22:17:46 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 54 -1 0.25
2018-05-28 22:17:46 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 53 -1 0.23333333333333334
2018-05-28 22:17:46 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 73 -1 0.23333333333333334
2018-05-28 22:17:46 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 74 -1 0.21666666666666667
2018-05-28 22:17:46 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 75 -1 0.2
2018-05-28 22:17:46 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 49 -1 0.16666666666666669
2018-05-28 22:17:46 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 48 -1 0.15000000000000002
2018-05-28 22:17:46 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 47 -1 0.13333333333333336
2018-05-28 22:17:46 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 46 -1 0.11666666666666664
2018-05-28 22:17:46 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 45 -1 0.09999999999999998
2018-05-28 22:17:46 INFO  Main:226 - trees-common/src/main/java/com/mattunderscore/trees/common/TreeWalkerFactoryImpl.java 39 -1 0.0
2018-05-28 22:17:46 DEBUG Main:227 - ------------------------------
2018-05-28 23:01:48 INFO  ASTNodeFetcher:129 - xu  node accept(nextLevel, walker)
2018-05-28 23:01:48 INFO  ASTNodeFetcher:131 - xu h [CtClassImpl, CtPackageImpl, CtBlockImpl, CtMethodImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage]
2018-05-28 23:01:48 INFO  ASTNodeFetcher:132 - 73
2018-05-28 23:01:48 INFO  Main:269 - Node:  accept(nextLevel, walker)
2018-05-28 23:01:48 INFO  Main:270 - [CtClassImpl, CtPackageImpl, CtBlockImpl, CtMethodImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage]
2018-05-28 23:01:48 DEBUG Main:271 - size 5
2018-05-28 23:01:48 INFO  Main:273 - p.x [CtClassImpl, CtPackageImpl, CtBlockImpl, CtMethodImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage]
2018-05-28 23:01:48 INFO  Main:274 - p.y [accept(nextLevel, walker)]
2018-05-28 23:01:48 INFO  Main:273 - p.x [CtClassImpl, CtPackageImpl, CtBlockImpl, CtMethodImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage]
2018-05-28 23:01:48 INFO  Main:274 - p.y accept(nextLevel, walker)
2018-05-28 23:01:48 INFO  Main:273 - p.x [CtClassImpl, CtPackageImpl, CtBlockImpl, CtMethodImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage]
2018-05-28 23:01:48 INFO  Main:274 - p.y [nextLevel, walker]
2018-05-28 23:01:48 INFO  Main:273 - p.x [CtClassImpl, CtPackageImpl, CtBlockImpl, CtMethodImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage]
2018-05-28 23:01:48 INFO  Main:274 - p.y nextLevel
2018-05-28 23:01:48 INFO  Main:273 - p.x [CtClassImpl, CtPackageImpl, CtBlockImpl, CtMethodImpl, CtInvocationImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage]
2018-05-28 23:01:48 INFO  Main:274 - p.y walker
2018-05-28 23:01:48 INFO  Main:304 - candidatePatch [try {
    accept(nextLevel, walker);
} catch (java.lang.IndexOutOfBoundsException __new_var) {
}]
2018-05-28 23:01:48 INFO  Main:304 - candidatePatch [try {
    accept(nextLevel, walker);
} catch (java.lang.StringIndexOutOfBoundsException __new_var) {
}]
2018-05-28 23:01:49 INFO  Main:304 - candidatePatch [try {
    accept(nextLevel, walker);
} catch (java.lang.ClassCastException __new_var) {
}]
2018-05-28 23:01:49 INFO  Main:304 - candidatePatch [try {
    accept(nextLevel, walker);
} catch (java.lang.NullPointerException __new_var) {
}]
2018-05-28 23:01:50 INFO  Main:304 - candidatePatch [try {
    accept(nextLevel, walker);
} catch (java.lang.Exception __new_var) {
}]
2018-05-28 23:01:50 INFO  Main:304 - candidatePatch []
2018-05-28 23:01:50 INFO  Main:304 - candidatePatch [currentLevel.size()]
2018-05-28 23:01:51 INFO  Main:304 - candidatePatch [nextLevel.size()]
2018-05-28 23:01:51 INFO  Main:304 - candidatePatch [return ]
2018-05-28 23:01:52 INFO  Main:304 - candidatePatch [return , return ]
2018-05-28 23:01:52 INFO  Main:304 - candidatePatch []
2018-05-28 23:01:52 INFO  Main:304 - candidatePatch [walker.onNext(0)]
2018-05-28 23:01:52 INFO  Main:304 - candidatePatch [walker.onNext(null)]
2018-05-28 23:01:52 INFO  Main:304 - candidatePatch [walker.onNext(1)]
2018-05-28 23:01:52 INFO  Main:304 - candidatePatch [walker.onNext(false)]
2018-05-28 23:01:52 INFO  Main:304 - candidatePatch [walker.onNext("__TEXTMSG")]
2018-05-28 23:01:53 INFO  Main:304 - candidatePatch [currentLevel.size()]
2018-05-28 23:01:53 INFO  Main:304 - candidatePatch [return , currentLevel.size()]
2018-05-28 23:01:53 INFO  Main:304 - candidatePatch [nextLevel.size()]
2018-05-28 23:01:53 INFO  Main:304 - candidatePatch [return , nextLevel.size()]
2018-05-28 23:01:53 INFO  Main:304 - candidatePatch [this.accept(null, null)]
2018-05-28 23:01:53 INFO  Main:304 - candidatePatch [this.accept(currentLevel, null)]
2018-05-28 23:01:53 INFO  Main:304 - candidatePatch [this.accept(nextLevel, null)]
2018-05-28 23:01:53 INFO  Main:304 - candidatePatch [this.accept(null, walker)]
2018-05-28 23:01:53 INFO  Main:304 - candidatePatch [currentLevel.addAll(null)]
2018-05-28 23:01:54 INFO  Main:304 - candidatePatch [nextLevel.addAll(null)]
2018-05-28 23:01:54 INFO  Main:304 - candidatePatch [return ]
2018-05-28 23:01:54 INFO  Main:304 - candidatePatch [currentLevel.size(), return ]
2018-05-28 23:01:55 INFO  Main:304 - candidatePatch [nextLevel.size(), return ]
2018-05-28 23:01:55 INFO  Main:304 - candidatePatch [return , return ]
2018-05-28 23:01:55 INFO  Main:304 - candidatePatch [return , return , return ]
2018-05-28 23:01:56 INFO  Main:304 - candidatePatch accept(walker, null)
2018-05-28 23:01:56 INFO  Main:304 - candidatePatch accept(nextLevel, null)
2018-05-28 23:01:57 INFO  Main:304 - candidatePatch accept(nextLevel, null)
2018-05-28 23:01:57 INFO  Main:304 - candidatePatch accept(0, walker)
2018-05-28 23:01:57 INFO  Main:304 - candidatePatch accept(null, walker)
2018-05-28 23:01:57 INFO  Main:304 - candidatePatch accept(null, walker)
2018-05-28 23:01:57 INFO  Main:304 - candidatePatch accept(1, walker)
2018-05-28 23:01:57 INFO  Main:304 - candidatePatch accept(false, walker)
2018-05-28 23:01:57 INFO  Main:304 - candidatePatch accept(walker, walker)
2018-05-28 23:01:57 INFO  Main:304 - candidatePatch accept(nextLevel, walker)
2018-05-28 23:01:57 INFO  Main:304 - candidatePatch accept(nextLevel, walker)
2018-05-28 23:01:57 INFO  Main:304 - candidatePatch walker.onNext(0)
2018-05-28 23:01:57 INFO  Main:304 - candidatePatch walker.onNext(null)
2018-05-28 23:01:58 INFO  Main:304 - candidatePatch walker.onNext(1)
2018-05-28 23:01:58 INFO  Main:304 - candidatePatch walker.onNext(false)
2018-05-28 23:01:58 INFO  Main:304 - candidatePatch walker.onNext("__TEXTMSG")
2018-05-28 23:01:58 INFO  Main:304 - candidatePatch nextLevel.size()
2018-05-28 23:01:58 INFO  Main:304 - candidatePatch this.accept(nextLevel, null)
2018-05-28 23:01:59 INFO  Main:304 - candidatePatch this.accept(null, walker)
2018-05-28 23:01:59 INFO  Main:304 - candidatePatch nextLevel.addAll(null)
2018-05-28 23:01:59 INFO  Main:304 - candidatePatch walker.onEmpty()
2018-05-28 23:02:00 INFO  Main:304 - candidatePatch walker.onCompleted()
2018-05-28 23:02:00 INFO  Main:304 - candidatePatch currentLevel.size()
2018-05-28 23:02:01 INFO  Main:304 - candidatePatch nextLevel.size()
2018-05-28 23:02:01 INFO  Main:304 - candidatePatch currentLevel.clear()
2018-05-28 23:02:01 INFO  Main:304 - candidatePatch nextLevel.clear()
2018-05-28 23:02:01 INFO  Main:304 - candidatePatch currentLevel.hashCode()
2018-05-28 23:02:02 INFO  Main:304 - candidatePatch nextLevel.hashCode()
2018-05-28 23:02:02 INFO  Main:304 - candidatePatch currentLevel.isEmpty()
2018-05-28 23:02:03 INFO  Main:304 - candidatePatch nextLevel.isEmpty()
2018-05-28 23:02:03 INFO  Main:304 - candidatePatch currentLevel.iterator()
2018-05-28 23:02:03 INFO  Main:304 - candidatePatch nextLevel.iterator()
2018-05-28 23:02:04 INFO  Main:304 - candidatePatch currentLevel.listIterator()
2018-05-28 23:02:04 INFO  Main:304 - candidatePatch nextLevel.listIterator()
2018-05-28 23:02:05 INFO  Main:304 - candidatePatch currentLevel.spliterator()
2018-05-28 23:02:05 INFO  Main:304 - candidatePatch nextLevel.spliterator()
2018-05-28 23:02:06 INFO  Main:304 - candidatePatch currentLevel.toArray()
2018-05-28 23:02:06 INFO  Main:304 - candidatePatch nextLevel.toArray()
2018-05-28 23:02:07 INFO  Main:304 - candidatePatch this.accept(currentLevel, null)
2018-05-28 23:02:07 INFO  Main:304 - candidatePatch this.accept(nextLevel, null)
2018-05-28 23:02:07 INFO  Main:304 - candidatePatch this.accept(null, walker)
2018-05-28 23:02:07 INFO  Main:304 - candidatePatch this.accept(currentLevel, walker)
2018-05-28 23:02:07 INFO  Main:304 - candidatePatch this.accept(nextLevel, walker)
2018-05-28 23:02:08 INFO  Main:304 - candidatePatch Error in printing the node. One parent isn't initialized!
2018-05-28 23:02:08 INFO  Main:304 - candidatePatch Error in printing the node. One parent isn't initialized!
2018-05-28 23:02:09 INFO  Main:304 - candidatePatch Error in printing the node. One parent isn't initialized!
2018-05-28 23:02:09 INFO  Main:304 - candidatePatch Error in printing the node. One parent isn't initialized!
2018-05-28 23:02:09 INFO  Main:304 - candidatePatch Error in printing the node. One parent isn't initialized!
2018-05-28 23:02:10 INFO  Main:304 - candidatePatch walker.onNext(0)
2018-05-28 23:02:10 INFO  Main:304 - candidatePatch walker.onNext(null)
2018-05-28 23:02:10 INFO  Main:304 - candidatePatch walker.onNext(1)
2018-05-28 23:02:10 INFO  Main:304 - candidatePatch walker.onNext(false)
2018-05-28 23:02:10 INFO  Main:304 - candidatePatch walker.onNext("__TEXTMSG")
2018-05-28 23:02:10 INFO  Main:304 - candidatePatch walker.onNext(walker)
2018-05-28 23:02:10 INFO  Main:304 - candidatePatch walker.onNext(currentLevel)
2018-05-28 23:02:10 INFO  Main:304 - candidatePatch walker.onNext(nextLevel)
2018-05-28 23:02:10 INFO  Main:304 - candidatePatch this.accept(walker, null)
2018-05-28 23:02:10 INFO  Main:304 - candidatePatch this.accept(currentLevel, null)
2018-05-28 23:02:10 INFO  Main:304 - candidatePatch this.accept(nextLevel, null)
2018-05-28 23:02:10 INFO  Main:304 - candidatePatch this.accept(0, walker)
2018-05-28 23:02:10 INFO  Main:304 - candidatePatch this.accept(null, walker)
2018-05-28 23:02:10 INFO  Main:304 - candidatePatch this.accept(1, walker)
2018-05-28 23:02:10 INFO  Main:304 - candidatePatch this.accept(false, walker)
2018-05-28 23:02:10 INFO  Main:304 - candidatePatch this.accept("__TEXTMSG", walker)
2018-05-28 23:02:10 INFO  Main:304 - candidatePatch this.accept(walker, walker)
2018-05-28 23:02:10 INFO  Main:304 - candidatePatch this.accept(currentLevel, walker)
2018-05-28 23:02:10 INFO  Main:304 - candidatePatch this.accept(nextLevel, walker)
2018-05-28 23:02:10 INFO  Main:304 - candidatePatch walker.onEmpty()
2018-05-28 23:02:10 INFO  Main:304 - candidatePatch walker.onCompleted()
2018-05-28 23:02:10 INFO  Main:304 - candidatePatch currentLevel.size()
2018-05-28 23:02:10 INFO  Main:304 - candidatePatch nextLevel.size()
2018-05-28 23:02:10 INFO  Main:304 - candidatePatch currentLevel.add(0)
2018-05-28 23:02:10 INFO  Main:304 - candidatePatch currentLevel.add(null)
2018-05-28 23:02:10 INFO  Main:304 - candidatePatch currentLevel.add(1)
2018-05-28 23:02:10 INFO  Main:304 - candidatePatch currentLevel.add(false)
2018-05-28 23:02:10 INFO  Main:304 - candidatePatch currentLevel.add("__TEXTMSG")
2018-05-28 23:02:10 INFO  Main:304 - candidatePatch currentLevel.add(walker)
2018-05-28 23:02:10 INFO  Main:304 - candidatePatch currentLevel.add(nextLevel)
2018-05-28 23:02:11 INFO  Main:304 - candidatePatch nextLevel.add(0)
2018-05-28 23:02:11 INFO  Main:304 - candidatePatch nextLevel.add(null)
2018-05-28 23:02:11 INFO  Main:304 - candidatePatch nextLevel.add(1)
2018-05-28 23:02:11 INFO  Main:304 - candidatePatch nextLevel.add(false)
2018-05-28 23:02:11 INFO  Main:304 - candidatePatch nextLevel.add("__TEXTMSG")
2018-05-28 23:02:11 INFO  Main:304 - candidatePatch nextLevel.add(walker)
2018-05-28 23:02:11 INFO  Main:304 - candidatePatch nextLevel.add(currentLevel)
2018-05-28 23:02:11 INFO  Main:304 - candidatePatch nextLevel.add(nextLevel)
2018-05-28 23:02:11 INFO  Main:304 - candidatePatch this.accept(currentLevel, null)
2018-05-28 23:02:11 INFO  Main:304 - candidatePatch this.accept(nextLevel, null)
2018-05-28 23:02:11 INFO  Main:304 - candidatePatch this.accept(null, walker)
2018-05-28 23:02:11 INFO  Main:304 - candidatePatch this.accept(currentLevel, walker)
2018-05-28 23:02:11 INFO  Main:304 - candidatePatch this.accept(nextLevel, walker)
2018-05-28 23:02:11 INFO  Main:304 - candidatePatch currentLevel.addAll(null)
2018-05-28 23:02:11 INFO  Main:304 - candidatePatch currentLevel.addAll(nextLevel)
2018-05-28 23:02:12 INFO  Main:304 - candidatePatch nextLevel.addAll(null)
2018-05-28 23:02:12 INFO  Main:304 - candidatePatch nextLevel.addAll(currentLevel)
2018-05-28 23:02:12 INFO  Main:304 - candidatePatch nextLevel.addAll(nextLevel)
2018-05-28 23:02:13 INFO  Main:304 - candidatePatch return 
2018-05-28 23:02:13 INFO  Main:304 - candidatePatch this.accept(currentLevel, null)
2018-05-28 23:02:13 INFO  Main:304 - candidatePatch this.accept(nextLevel, null)
2018-05-28 23:02:13 INFO  Main:304 - candidatePatch this.accept(null, walker)
2018-05-28 23:02:13 INFO  Main:304 - candidatePatch !("__TEXTMSG" instanceof com.mattunderscore.trees.traversal.Walker<N>)
2018-05-28 23:02:13 INFO  Main:304 - candidatePatch !("__TEXTMSG" instanceof ? extends com.mattunderscore.trees.tree.Node<E>)
2018-05-28 23:02:13 INFO  Main:304 - candidatePatch !("__TEXTMSG" instanceof T extends com.mattunderscore.trees.tree.Tree<E, N>)
2018-05-28 23:02:13 INFO  Main:304 - candidatePatch !("__TEXTMSG" instanceof com.mattunderscore.trees.tree.Node<E>)
2018-05-28 23:02:13 INFO  Main:304 - candidatePatch !("__TEXTMSG" instanceof java.util.List<N>)
2018-05-28 23:02:13 INFO  Main:304 - candidatePatch !("__TEXTMSG" instanceof N extends com.mattunderscore.trees.tree.Node<E>)
2018-05-28 23:02:13 INFO  Main:304 - candidatePatch !("__TEXTMSG" instanceof com.mattunderscore.trees.tree.Tree<E, N>)
2018-05-28 23:02:13 INFO  Main:304 - candidatePatch !("__TEXTMSG" instanceof com.mattunderscore.trees.collection.SimpleCollection<? extends com.mattunderscore.trees.tree.Node<E>>)
2018-05-28 23:02:13 INFO  Main:304 - candidatePatch !("__TEXTMSG" instanceof java.util.Collection<N>)
2018-05-28 23:02:13 INFO  Main:304 - candidatePatch !(walker instanceof com.mattunderscore.trees.traversal.Walker<N>)
2018-05-28 23:02:13 INFO  Main:304 - candidatePatch !(walker instanceof ? extends com.mattunderscore.trees.tree.Node<E>)
2018-05-28 23:02:13 INFO  Main:304 - candidatePatch !(walker instanceof T extends com.mattunderscore.trees.tree.Tree<E, N>)
2018-05-28 23:02:13 INFO  Main:304 - candidatePatch !(walker instanceof com.mattunderscore.trees.tree.Node<E>)
2018-05-28 23:02:13 INFO  Main:304 - candidatePatch !(walker instanceof java.util.List<N>)
2018-05-28 23:02:13 INFO  Main:304 - candidatePatch !(walker instanceof N extends com.mattunderscore.trees.tree.Node<E>)
2018-05-28 23:02:13 INFO  Main:304 - candidatePatch !(walker instanceof com.mattunderscore.trees.tree.Tree<E, N>)
2018-05-28 23:02:13 INFO  Main:304 - candidatePatch !(walker instanceof com.mattunderscore.trees.collection.SimpleCollection<? extends com.mattunderscore.trees.tree.Node<E>>)
2018-05-28 23:02:13 INFO  Main:304 - candidatePatch !(walker instanceof java.util.Collection<N>)
2018-05-28 23:02:13 INFO  Main:304 - candidatePatch !(currentLevel instanceof com.mattunderscore.trees.traversal.Walker<N>)
2018-05-28 23:02:13 INFO  Main:304 - candidatePatch !(currentLevel instanceof ? extends com.mattunderscore.trees.tree.Node<E>)
2018-05-28 23:02:14 INFO  Main:304 - candidatePatch !(currentLevel instanceof T extends com.mattunderscore.trees.tree.Tree<E, N>)
2018-05-28 23:02:14 INFO  Main:304 - candidatePatch !(currentLevel instanceof com.mattunderscore.trees.tree.Node<E>)
2018-05-28 23:02:14 INFO  Main:304 - candidatePatch !(currentLevel instanceof java.util.List<N>)
2018-05-28 23:02:14 INFO  Main:304 - candidatePatch !(currentLevel instanceof java.util.ArrayList<N>)
2018-05-28 23:02:14 INFO  Main:304 - candidatePatch !(currentLevel instanceof java.util.ArrayList<>)
2018-05-28 23:02:14 INFO  Main:304 - candidatePatch !(currentLevel instanceof N extends com.mattunderscore.trees.tree.Node<E>)
2018-05-28 23:02:14 INFO  Main:304 - candidatePatch !(currentLevel instanceof com.mattunderscore.trees.tree.Tree<E, N>)
2018-05-28 23:02:14 INFO  Main:304 - candidatePatch !(currentLevel instanceof com.mattunderscore.trees.collection.SimpleCollection<? extends com.mattunderscore.trees.tree.Node<E>>)
2018-05-28 23:02:14 INFO  Main:304 - candidatePatch !(currentLevel instanceof java.util.Collection<N>)
2018-05-28 23:02:14 INFO  Main:304 - candidatePatch !(nextLevel instanceof com.mattunderscore.trees.traversal.Walker<N>)
2018-05-28 23:02:14 INFO  Main:304 - candidatePatch !(nextLevel instanceof ? extends com.mattunderscore.trees.tree.Node<E>)
2018-05-28 23:02:14 INFO  Main:304 - candidatePatch !(nextLevel instanceof T extends com.mattunderscore.trees.tree.Tree<E, N>)
2018-05-28 23:02:14 INFO  Main:304 - candidatePatch !(nextLevel instanceof com.mattunderscore.trees.tree.Node<E>)
2018-05-28 23:02:14 INFO  Main:304 - candidatePatch !(nextLevel instanceof java.util.List<N>)
2018-05-28 23:02:14 INFO  Main:304 - candidatePatch !(nextLevel instanceof java.util.ArrayList<N>)
2018-05-28 23:02:14 INFO  Main:304 - candidatePatch !(nextLevel instanceof java.util.ArrayList<>)
2018-05-28 23:02:14 INFO  Main:304 - candidatePatch !(nextLevel instanceof N extends com.mattunderscore.trees.tree.Node<E>)
2018-05-28 23:02:14 INFO  Main:304 - candidatePatch !(nextLevel instanceof com.mattunderscore.trees.tree.Tree<E, N>)
2018-05-28 23:02:14 INFO  Main:304 - candidatePatch !(nextLevel instanceof com.mattunderscore.trees.collection.SimpleCollection<? extends com.mattunderscore.trees.tree.Node<E>>)
2018-05-28 23:02:14 INFO  Main:304 - candidatePatch !(nextLevel instanceof java.util.Collection<N>)
2018-05-28 23:02:14 INFO  Main:304 - candidatePatch !false
2018-05-28 23:02:14 INFO  Main:304 - candidatePatch return 
2018-05-28 23:02:14 INFO  Main:304 - candidatePatch null
2018-05-28 23:02:14 INFO  Main:304 - candidatePatch nextLevel
2018-05-28 23:02:14 INFO  Main:304 - candidatePatch null
2018-05-28 23:02:14 INFO  Main:304 - candidatePatch currentLevel
2018-05-28 23:02:15 INFO  Main:304 - candidatePatch nextLevel
2018-05-28 23:02:15 INFO  Main:304 - candidatePatch null
2018-05-28 23:02:15 INFO  Main:304 - candidatePatch currentLevel
2018-05-28 23:02:15 INFO  Main:304 - candidatePatch nextLevel
2018-05-28 23:02:15 INFO  Main:304 - candidatePatch null
2018-05-28 23:02:15 INFO  Main:304 - candidatePatch Error in printing the node. One parent isn't initialized!
2018-05-28 23:02:15 INFO  Main:304 - candidatePatch Error in printing the node. One parent isn't initialized!
2018-05-28 23:02:16 INFO  Main:304 - candidatePatch currentLevel
2018-05-28 23:02:16 INFO  Main:304 - candidatePatch nextLevel
2018-05-28 23:02:16 INFO  Main:304 - candidatePatch null
2018-05-28 23:02:16 INFO  Main:304 - candidatePatch currentLevel
2018-05-28 23:02:16 INFO  Main:304 - candidatePatch nextLevel
2018-05-28 23:02:16 INFO  Main:304 - candidatePatch null
2018-05-28 23:02:17 INFO  Main:304 - candidatePatch walker
2018-05-28 23:02:17 INFO  Main:304 - candidatePatch null
2018-05-28 23:02:17 INFO  Main:304 - candidatePatch walker
2018-05-28 23:02:17 INFO  Main:304 - candidatePatch null
2018-05-28 23:02:17 INFO  Main:304 - candidatePatch walker
2018-05-28 23:02:17 INFO  Main:304 - candidatePatch null
2018-05-28 23:02:17 INFO  Main:304 - candidatePatch walker
2018-05-28 23:02:17 INFO  Main:304 - candidatePatch null
2018-05-28 23:02:17 INFO  Main:304 - candidatePatch walker
2018-05-28 23:03:43 INFO  ASTNodeFetcher:129 - xu  node {
    final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
    preOrderWalker.accept(tree, nodeWalker);
}
2018-05-28 23:03:43 INFO  ASTNodeFetcher:131 - xu h [CtClassImpl, CtPackageImpl, CtMethodImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage]
2018-05-28 23:03:43 INFO  ASTNodeFetcher:132 - 73
2018-05-28 23:03:43 INFO  Main:269 - Node:  {
    final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
    preOrderWalker.accept(tree, nodeWalker);
}
2018-05-28 23:03:43 INFO  Main:270 - [CtClassImpl, CtPackageImpl, CtMethodImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage]
2018-05-28 23:03:43 DEBUG Main:271 - size 2
2018-05-28 23:03:43 INFO  Main:273 - p.x [CtClassImpl, CtPackageImpl, CtMethodImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage]
2018-05-28 23:03:43 INFO  Main:274 - p.y {
    final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker);
    preOrderWalker.accept(tree, nodeWalker);
}
2018-05-28 23:03:43 INFO  Main:273 - p.x [CtClassImpl, CtPackageImpl, CtBlockImpl, CtMethodImpl, class spoon.reflect.factory.PackageFactory$CtRootPackage]
2018-05-28 23:03:43 INFO  Main:274 - p.y [final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = new com.mattunderscore.trees.common.walkers.NodeToElementWalker<>(walker), preOrderWalker.accept(tree, nodeWalker)]
2018-05-28 23:03:43 INFO  Main:304 - candidatePatch [try {
    final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = Error in printing the node. One parent isn't initialized!]
2018-05-28 23:03:43 INFO  Main:304 - candidatePatch [try {
    final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = Error in printing the node. One parent isn't initialized!]
2018-05-28 23:03:43 INFO  Main:304 - candidatePatch [try {
    final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = Error in printing the node. One parent isn't initialized!]
2018-05-28 23:03:43 INFO  Main:304 - candidatePatch [try {
    final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = Error in printing the node. One parent isn't initialized!]
2018-05-28 23:03:43 INFO  Main:304 - candidatePatch [try {
    final com.mattunderscore.trees.traversal.Walker<N> nodeWalker = Error in printing the node. One parent isn't initialized!]
2018-06-25 21:46:33 DEBUG Main:223 - suspicious
2018-06-25 21:46:33 INFO  Main:226 - runtime/Java/src/org/antlr/v4/runtime/FailedPredicateException.java 58 -1 0.8833333333333333
2018-06-25 21:46:33 INFO  Main:226 - runtime/Java/src/org/antlr/v4/runtime/FailedPredicateException.java 66 -1 0.7833333333333333
2018-06-25 21:46:33 INFO  Main:226 - runtime/Java/src/org/antlr/v4/runtime/FailedPredicateException.java 45 -1 0.6666666666666667
2018-06-25 21:46:33 INFO  Main:226 - runtime/Java/src/org/antlr/v4/runtime/FailedPredicateException.java 65 -1 0.5
2018-06-25 21:46:33 INFO  Main:226 - runtime/Java/src/org/antlr/v4/runtime/FailedPredicateException.java 63 -1 0.4666666666666667
2018-06-25 21:46:33 INFO  Main:226 - runtime/Java/src/org/antlr/v4/runtime/FailedPredicateException.java 62 -1 0.45
2018-06-25 21:46:33 INFO  Main:226 - runtime/Java/src/org/antlr/v4/runtime/FailedPredicateException.java 55 -1 0.33333333333333337
2018-06-25 21:46:33 INFO  Main:226 - runtime/Java/src/org/antlr/v4/runtime/FailedPredicateException.java 93 -1 0.3333333333333333
2018-06-25 21:46:33 INFO  Main:226 - runtime/Java/src/org/antlr/v4/runtime/FailedPredicateException.java 54 -1 0.31666666666666665
2018-06-25 21:46:33 INFO  Main:226 - runtime/Java/src/org/antlr/v4/runtime/FailedPredicateException.java 94 -1 0.31666666666666665
2018-06-25 21:46:33 INFO  Main:226 - runtime/Java/src/org/antlr/v4/runtime/FailedPredicateException.java 51 -1 0.26666666666666666
2018-06-25 21:46:33 INFO  Main:226 - runtime/Java/src/org/antlr/v4/runtime/FailedPredicateException.java 67 -1 0.26666666666666666
2018-06-25 21:46:33 INFO  Main:226 - runtime/Java/src/org/antlr/v4/runtime/FailedPredicateException.java 50 -1 0.25
2018-06-25 21:46:33 INFO  Main:226 - runtime/Java/src/org/antlr/v4/runtime/FailedPredicateException.java 68 -1 0.25
2018-06-25 21:46:33 INFO  Main:226 - runtime/Java/src/org/antlr/v4/runtime/FailedPredicateException.java 70 -1 0.21666666666666667
2018-06-25 21:46:33 INFO  Main:226 - runtime/Java/src/org/antlr/v4/runtime/FailedPredicateException.java 71 -1 0.2
2018-06-25 21:46:33 INFO  Main:226 - runtime/Java/src/org/antlr/v4/runtime/FailedPredicateException.java 72 -1 0.1833333333333333
2018-06-25 21:46:33 INFO  Main:226 - runtime/Java/src/org/antlr/v4/runtime/FailedPredicateException.java 75 -1 0.13333333333333336
2018-06-25 21:46:33 INFO  Main:226 - runtime/Java/src/org/antlr/v4/runtime/FailedPredicateException.java 76 -1 0.11666666666666664
2018-06-25 21:46:33 INFO  Main:226 - runtime/Java/src/org/antlr/v4/runtime/FailedPredicateException.java 79 -1 0.06666666666666665
2018-06-25 21:46:33 INFO  Main:226 - runtime/Java/src/org/antlr/v4/runtime/FailedPredicateException.java 80 -1 0.04999999999999999
2018-06-25 21:46:33 INFO  Main:226 - runtime/Java/src/org/antlr/v4/runtime/FailedPredicateException.java 83 -1 0.0
2018-06-25 21:46:33 INFO  Main:226 - runtime/Java/src/org/antlr/v4/runtime/FailedPredicateException.java 84 -1 -0.016666666666666663
2018-06-25 21:46:33 INFO  Main:226 - runtime/Java/src/org/antlr/v4/runtime/FailedPredicateException.java 88 -1 -0.08333333333333337
2018-06-25 21:46:33 INFO  Main:226 - runtime/Java/src/org/antlr/v4/runtime/FailedPredicateException.java 89 -1 -0.10000000000000003
2018-06-25 21:46:33 INFO  Main:226 - runtime/Java/src/org/antlr/v4/runtime/FailedPredicateException.java 95 -1 -0.2
2018-06-25 21:46:33 INFO  Main:226 - runtime/Java/src/org/antlr/v4/runtime/FailedPredicateException.java 98 -1 -0.25000000000000006
2018-06-25 21:46:33 DEBUG Main:227 - ------------------------------
